{
  "magicNumber": 1635018093,
  "metadata": {
    "V11": {
      "modules": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Blake2_128Concat", "key": "AccountId", "value": "AccountInfo", "linked": false }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [" The full account information for a particular account ID."]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": { "Plain": "u32" },
                "fallback": "0x00",
                "documentation": [" Total extrinsics count for the current block."]
              },
              {
                "name": "AllExtrinsicsWeight",
                "modifier": "Default",
                "type": { "Plain": "ExtrinsicsWeight" },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [" Total weight for all extrinsics for the current block."]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": { "Plain": "u32" },
                "fallback": "0x00",
                "documentation": [" Total length (in bytes) for all extrinsics put together, for the current block."]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": { "Map": { "hasher": "Twox64Concat", "key": "BlockNumber", "value": "Hash", "linked": false } },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [" Map of block numbers to block hashes."]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": { "Map": { "hasher": "Twox64Concat", "key": "u32", "value": "Bytes", "linked": false } },
                "fallback": "0x00",
                "documentation": [" Extrinsics data for the current block (maps an extrinsic's index to its data)."]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": { "Plain": "BlockNumber" },
                "fallback": "0x00000000",
                "documentation": [" The current block number being processed. Set by `execute_block`."]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": { "Plain": "Hash" },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [" Hash of the previous block."]
              },
              {
                "name": "ExtrinsicsRoot",
                "modifier": "Default",
                "type": { "Plain": "Hash" },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [" Extrinsics root of the current block, also part of the block header."]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": { "Plain": "DigestOf" },
                "fallback": "0x00",
                "documentation": [" Digest of the current block, also part of the block header."]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": { "Plain": "Vec<EventRecord>" },
                "fallback": "0x00",
                "documentation": [" Events deposited for the current block."]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": { "Plain": "EventIndex" },
                "fallback": "0x00000000",
                "documentation": [" The number of events in the `Events<T>` list."]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_128Concat",
                    "key": "Hash",
                    "value": "Vec<(BlockNumber,EventIndex)>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": { "Plain": "LastRuntimeUpgradeInfo" },
                "fallback": "0x00",
                "documentation": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": { "Plain": "Phase" },
                "fallback": "0x00",
                "documentation": [" The execution phase of the block."]
              }
            ]
          },
          "calls": [
            {
              "name": "fill_block",
              "args": [{ "name": "_ratio", "type": "Perbill" }],
              "documentation": [" A dispatch that will fill the block weight up to the given ratio."]
            },
            {
              "name": "remark",
              "args": [{ "name": "_remark", "type": "Bytes" }],
              "documentation": [
                " Make some on-chain remark.",
                "",
                " # <weight>",
                " - `O(1)`",
                " - Base Weight: 0.665 µs, independent of remark length.",
                " - No DB operations.",
                " # </weight>"
              ]
            },
            {
              "name": "set_heap_pages",
              "args": [{ "name": "pages", "type": "u64" }],
              "documentation": [
                " Set the number of pages in the WebAssembly environment's heap.",
                "",
                " # <weight>",
                " - `O(1)`",
                " - 1 storage write.",
                " - Base Weight: 1.405 µs",
                " - 1 write to HEAP_PAGES",
                " # </weight>"
              ]
            },
            {
              "name": "set_code",
              "args": [{ "name": "code", "type": "Bytes" }],
              "documentation": [
                " Set the new runtime code.",
                "",
                " # <weight>",
                " - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                " - 1 storage write (codec `O(C)`).",
                " - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).",
                " - 1 event.",
                " The weight of this function is dependent on the runtime, but generally this is very expensive.",
                " We will treat this as a full block.",
                " # </weight>"
              ]
            },
            {
              "name": "set_code_without_checks",
              "args": [{ "name": "code", "type": "Bytes" }],
              "documentation": [
                " Set the new runtime code without doing any checks of the given `code`.",
                "",
                " # <weight>",
                " - `O(C)` where `C` length of `code`",
                " - 1 storage write (codec `O(C)`).",
                " - 1 event.",
                " The weight of this function is dependent on the runtime. We will treat this as a full block.",
                " # </weight>"
              ]
            },
            {
              "name": "set_changes_trie_config",
              "args": [{ "name": "changes_trie_config", "type": "Option<ChangesTrieConfiguration>" }],
              "documentation": [
                " Set the new changes trie configuration.",
                "",
                " # <weight>",
                " - `O(1)`",
                " - 1 storage write or delete (codec `O(1)`).",
                " - 1 call to `deposit_log`: Uses `append` API, so O(1)",
                " - Base Weight: 7.218 µs",
                " - DB Weight:",
                "     - Writes: Changes Trie, System Digest",
                " # </weight>"
              ]
            },
            {
              "name": "set_storage",
              "args": [{ "name": "items", "type": "Vec<KeyValue>" }],
              "documentation": [
                " Set some items of storage.",
                "",
                " # <weight>",
                " - `O(I)` where `I` length of `items`",
                " - `I` storage writes (`O(1)`).",
                " - Base Weight: 0.568 * i µs",
                " - Writes: Number of items",
                " # </weight>"
              ]
            },
            {
              "name": "kill_storage",
              "args": [{ "name": "keys", "type": "Vec<Key>" }],
              "documentation": [
                " Kill some items from storage.",
                "",
                " # <weight>",
                " - `O(IK)` where `I` length of `keys` and `K` length of one key",
                " - `I` storage deletions.",
                " - Base Weight: .378 * i µs",
                " - Writes: Number of items",
                " # </weight>"
              ]
            },
            {
              "name": "kill_prefix",
              "args": [
                { "name": "prefix", "type": "Key" },
                { "name": "_subkeys", "type": "u32" }
              ],
              "documentation": [
                " Kill all storage items with a key that starts with the given prefix.",
                "",
                " **NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                " the prefix we are removing to accurately calculate the weight of this function.",
                "",
                " # <weight>",
                " - `O(P)` where `P` amount of keys with prefix `prefix`",
                " - `P` storage deletions.",
                " - Base Weight: 0.834 * P µs",
                " - Writes: Number of subkeys + 1",
                " # </weight>"
              ]
            },
            {
              "name": "suicide",
              "args": [],
              "documentation": [
                " Kill the sending account, assuming there are no references outstanding and the composite",
                " data is equal to its default value.",
                "",
                " # <weight>",
                " - `O(1)`",
                " - 1 storage read and deletion.",
                " --------------------",
                " Base Weight: 8.626 µs",
                " No DB Read or Write operations because caller is already in overlay",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "ExtrinsicSuccess",
              "args": ["DispatchInfo"],
              "documentation": [" An extrinsic completed successfully."]
            },
            {
              "name": "ExtrinsicFailed",
              "args": ["DispatchError", "DispatchInfo"],
              "documentation": [" An extrinsic failed."]
            },
            { "name": "CodeUpdated", "args": [], "documentation": [" `:code` was updated."] },
            { "name": "NewAccount", "args": ["AccountId"], "documentation": [" A new account was created."] },
            { "name": "KilledAccount", "args": ["AccountId"], "documentation": [" An account was reaped."] }
          ],
          "constants": [
            {
              "name": "BlockHashCount",
              "type": "BlockNumber",
              "value": "0x84030000",
              "documentation": [" The maximum number of blocks to allow in mortal eras."]
            },
            {
              "name": "MaximumBlockWeight",
              "type": "Weight",
              "value": "0x00204aa9d1010000",
              "documentation": [" The maximum weight of a block."]
            },
            {
              "name": "DbWeight",
              "type": "RuntimeDbWeight",
              "value": "0x40787d010000000000e1f50500000000",
              "documentation": [" The weight of runtime database operations the runtime can invoke."]
            },
            {
              "name": "BlockExecutionWeight",
              "type": "Weight",
              "value": "0x00f2052a01000000",
              "documentation": [" The base weight of executing a block, independent of the transactions in the block."]
            },
            {
              "name": "ExtrinsicBaseWeight",
              "type": "Weight",
              "value": "0x4059730700000000",
              "documentation": [
                " The base weight of an Extrinsic in the block, independent of the of extrinsic being executed."
              ]
            },
            {
              "name": "MaximumBlockLength",
              "type": "u32",
              "value": "0x00005000",
              "documentation": [" The maximum length of a block (in bytes)."]
            }
          ],
          "errors": [
            {
              "name": "InvalidSpecName",
              "documentation": [
                " The name of specification does not match between the current runtime",
                " and the new runtime."
              ]
            },
            {
              "name": "SpecVersionNeedsToIncrease",
              "documentation": [
                " The specification version is not allowed to decrease between the current runtime",
                " and the new runtime."
              ]
            },
            {
              "name": "FailedToExtractRuntimeVersion",
              "documentation": [
                " Failed to extract the runtime version from the new runtime.",
                "",
                " Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ]
            },
            {
              "name": "NonDefaultComposite",
              "documentation": [" Suicide called when the account has non-default composite data."]
            },
            {
              "name": "NonZeroRefCount",
              "documentation": [" There is a non-zero reference count preventing the account from being purged."]
            }
          ]
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": { "Plain": "Moment" },
                "fallback": "0x0000000000000000",
                "documentation": [" Current time for the current block."]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": { "Plain": "bool" },
                "fallback": "0x00",
                "documentation": [" Did the timestamp get updated in this block?"]
              }
            ]
          },
          "calls": [
            {
              "name": "set",
              "args": [{ "name": "now", "type": "Compact<Moment>" }],
              "documentation": [
                " Set the current time.",
                "",
                " This call should be invoked exactly once per block. It will panic at the finalization",
                " phase, if this call hasn't been invoked by that time.",
                "",
                " The timestamp should be greater than the previous one by the amount specified by",
                " `MinimumPeriod`.",
                "",
                " The dispatch origin for this call must be `Inherent`.",
                "",
                " # <weight>",
                " - `O(T)` where `T` complexity of `on_timestamp_set`",
                " - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)",
                " - 1 event handler `on_timestamp_set` `O(T)`.",
                " - Benchmark: 7.678 (min squares analysis)",
                "   - NOTE: This benchmark was done for a runtime with insignificant `on_timestamp_set` handlers.",
                "     New benchmarking is needed when adding new handlers.",
                " # </weight>"
              ]
            }
          ],
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": "Moment",
              "value": "0xd007000000000000",
              "documentation": [
                " The minimum period between blocks. Beware that this is different to the *expected* period",
                " that the block production apparatus provides. Your chosen consensus system will generally",
                " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                " period on default settings."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": { "Plain": "u64" },
                "fallback": "0x0000000000000000",
                "documentation": [" Current epoch index."]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": { "Plain": "Vec<(AuthorityId,BabeAuthorityWeight)>" },
                "fallback": "0x00",
                "documentation": [" Current epoch authorities."]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": { "Plain": "u64" },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": { "Plain": "u64" },
                "fallback": "0x0000000000000000",
                "documentation": [" Current slot number."]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": { "Plain": "Randomness" },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": { "Plain": "Randomness" },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [" Next epoch randomness."]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": { "Plain": "u32" },
                "fallback": "0x00000000",
                "documentation": [
                  " Randomness under construction.",
                  "",
                  " We make a tradeoff between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "u32", "value": "Vec<Randomness>", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": { "Plain": "MaybeRandomness" },
                "fallback": "0x00",
                "documentation": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "type": { "Plain": "BlockNumber" },
                "fallback": "0x00000000",
                "documentation": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              }
            ]
          },
          "calls": [],
          "events": null,
          "constants": [
            {
              "name": "EpochDuration",
              "type": "u64",
              "value": "0x9600000000000000",
              "documentation": [
                " The number of **slots** that an epoch takes. We couple sessions to",
                " epochs, i.e. we start a new session once the new epoch begins."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "type": "Moment",
              "value": "0xa00f000000000000",
              "documentation": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "GrandpaFinality",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": { "Plain": "StoredState" },
                "fallback": "0x00",
                "documentation": [" State of the current authority set."]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": { "Plain": "StoredPendingChange" },
                "fallback": "0x00",
                "documentation": [" Pending change: (signaled at, scheduled change)."]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": { "Plain": "BlockNumber" },
                "fallback": "0x00",
                "documentation": [" next block number where we can force a change."]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": { "Plain": "(BlockNumber,BlockNumber)" },
                "fallback": "0x00",
                "documentation": [" `true` if we are currently stalled."]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": { "Plain": "SetId" },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "SetId", "value": "SessionIndex", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "report_equivocation",
              "args": [
                { "name": "equivocation_proof", "type": "EquivocationProof" },
                { "name": "key_owner_proof", "type": "KeyOwnerProof" }
              ],
              "documentation": [
                " Report voter equivocation/misbehavior. This method will verify the",
                " equivocation proof and validate the given key ownership proof",
                " against the extracted offender. If both are valid, the offence",
                " will be reported.",
                "",
                " Since the weight of the extrinsic is 0, in order to avoid DoS by",
                " submission of invalid equivocation reports, a mandatory pre-validation of",
                " the extrinsic is implemented in a `SignedExtension`."
              ]
            }
          ],
          "events": [
            {
              "name": "NewAuthorities",
              "args": ["AuthorityList"],
              "documentation": [" New authority set has been applied."]
            },
            { "name": "Paused", "args": [], "documentation": [" Current authority set has been paused."] },
            { "name": "Resumed", "args": [], "documentation": [" Current authority set has been resumed."] }
          ],
          "constants": [],
          "errors": [
            {
              "name": "PauseFailed",
              "documentation": [
                " Attempt to signal GRANDPA pause when the authority set isn't live",
                " (either paused or already pending pause)."
              ]
            },
            {
              "name": "ResumeFailed",
              "documentation": [
                " Attempt to signal GRANDPA resume when the authority set isn't paused",
                " (either live or already pending resume)."
              ]
            },
            {
              "name": "ChangePending",
              "documentation": [" Attempt to signal GRANDPA change with one already pending."]
            },
            { "name": "TooSoon", "documentation": [" Cannot signal forced change so soon after last."] },
            {
              "name": "InvalidKeyOwnershipProof",
              "documentation": [" A key ownership proof provided as part of an equivocation report is invalid."]
            },
            {
              "name": "DuplicateOffenceReport",
              "documentation": [" A given equivocation report is valid but already previously reported."]
            }
          ]
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "items": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountIndex",
                    "value": "(AccountId,BalanceOf)",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [" The lookup from index to account."]
              }
            ]
          },
          "calls": [
            {
              "name": "claim",
              "args": [{ "name": "index", "type": "AccountIndex" }],
              "documentation": [
                " Assign an previously unassigned index.",
                "",
                " Payment: `Deposit` is reserved from the sender account.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " - `index`: the index to be claimed. This must not be in use.",
                "",
                " Emits `IndexAssigned` if successful.",
                "",
                " # <weight>",
                " - `O(1)`.",
                " - One storage mutation (codec `O(1)`).",
                " - One reserve operation.",
                " - One event.",
                " # </weight>"
              ]
            },
            {
              "name": "transfer",
              "args": [
                { "name": "new", "type": "AccountId" },
                { "name": "index", "type": "AccountIndex" }
              ],
              "documentation": [
                " Assign an index already owned by the sender to another account. The balance reservation",
                " is effectively transferred to the new account.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " - `index`: the index to be re-assigned. This must be owned by the sender.",
                " - `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                "",
                " Emits `IndexAssigned` if successful.",
                "",
                " # <weight>",
                " - `O(1)`.",
                " - One storage mutation (codec `O(1)`).",
                " - One transfer operation.",
                " - One event.",
                " # </weight>"
              ]
            },
            {
              "name": "free",
              "args": [{ "name": "index", "type": "AccountIndex" }],
              "documentation": [
                " Free up an index owned by the sender.",
                "",
                " Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                "",
                " The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                "",
                " - `index`: the index to be freed. This must be owned by the sender.",
                "",
                " Emits `IndexFreed` if successful.",
                "",
                " # <weight>",
                " - `O(1)`.",
                " - One storage mutation (codec `O(1)`).",
                " - One reserve operation.",
                " - One event.",
                " # </weight>"
              ]
            },
            {
              "name": "force_transfer",
              "args": [
                { "name": "new", "type": "AccountId" },
                { "name": "index", "type": "AccountIndex" }
              ],
              "documentation": [
                " Force an index to an account. This doesn't require a deposit. If the index is already",
                " held, then any deposit is reimbursed to its current owner.",
                "",
                " The dispatch origin for this call must be _Root_.",
                "",
                " - `index`: the index to be (re-)assigned.",
                " - `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                "",
                " Emits `IndexAssigned` if successful.",
                "",
                " # <weight>",
                " - `O(1)`.",
                " - One storage mutation (codec `O(1)`).",
                " - Up to one reserve operation.",
                " - One event.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "IndexAssigned",
              "args": ["AccountId", "AccountIndex"],
              "documentation": [" A account index was assigned."]
            },
            {
              "name": "IndexFreed",
              "args": ["AccountIndex"],
              "documentation": [" A account index has been freed up (unassigned)."]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": { "Plain": "Balance" },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [" The total units issued in the system."]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Blake2_128Concat", "key": "AccountId", "value": "AccountData", "linked": false }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " The balance of an account.",
                  "",
                  " NOTE: THIS MAY NEVER BE IN EXISTENCE AND YET HAVE A `total().is_zero()`. If the total",
                  " is ever zero, then the entry *MUST* be removed.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountId",
                    "value": "Vec<BalanceLock>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": { "Plain": "ReleasesBalances" },
                "fallback": "0x00",
                "documentation": [" Storage version of the pallet.", "", " This is set to v2.0.0 for new networks."]
              }
            ]
          },
          "calls": [
            {
              "name": "transfer",
              "args": [
                { "name": "dest", "type": "LookupSource" },
                { "name": "value", "type": "Compact<Balance>" }
              ],
              "documentation": [
                " Transfer some liquid free balance to another account.",
                "",
                " `transfer` will set the `FreeBalance` of the sender and receiver.",
                " It will decrease the total issuance of the system by the `TransferFee`.",
                " If the sender's account is below the existential deposit as a result",
                " of the transfer, the account will be reaped.",
                "",
                " The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                " # <weight>",
                " - Dependent on arguments but not critical, given proper implementations for",
                "   input config types. See related functions below.",
                " - It contains a limited number of reads and writes internally and no complex computation.",
                "",
                " Related functions:",
                "",
                "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                "   - Transferring balances to accounts that did not exist before will cause",
                "      `T::OnNewAccount::on_new_account` to be called.",
                "   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                "     check that the transfer will not kill the origin account.",
                " ---------------------------------",
                " - Base Weight: 73.64 µs, worst case scenario (account created, account removed)",
                " - DB Weight: 1 Read and 1 Write to destination account",
                " - Origin account is already in memory, so no DB operations for them.",
                " # </weight>"
              ]
            },
            {
              "name": "set_balance",
              "args": [
                { "name": "who", "type": "LookupSource" },
                { "name": "new_free", "type": "Compact<Balance>" },
                { "name": "new_reserved", "type": "Compact<Balance>" }
              ],
              "documentation": [
                " Set the balances of a given account.",
                "",
                " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                " also decrease the total issuance of the system (`TotalIssuance`).",
                " If the new free or reserved balance is below the existential deposit,",
                " it will reset the account nonce (`frame_system::AccountNonce`).",
                "",
                " The dispatch origin for this call is `root`.",
                "",
                " # <weight>",
                " - Independent of the arguments.",
                " - Contains a limited number of reads and writes.",
                " ---------------------",
                " - Base Weight:",
                "     - Creating: 27.56 µs",
                "     - Killing: 35.11 µs",
                " - DB Weight: 1 Read, 1 Write to `who`",
                " # </weight>"
              ]
            },
            {
              "name": "force_transfer",
              "args": [
                { "name": "source", "type": "LookupSource" },
                { "name": "dest", "type": "LookupSource" },
                { "name": "value", "type": "Compact<Balance>" }
              ],
              "documentation": [
                " Exactly as `transfer`, except the origin must be root and the source account may be",
                " specified.",
                " # <weight>",
                " - Same as transfer, but additional read and write because the source account is",
                "   not assumed to be in the overlay.",
                " # </weight>"
              ]
            },
            {
              "name": "transfer_keep_alive",
              "args": [
                { "name": "dest", "type": "LookupSource" },
                { "name": "value", "type": "Compact<Balance>" }
              ],
              "documentation": [
                " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                " origin account.",
                "",
                " 99% of the time you want [`transfer`] instead.",
                "",
                " [`transfer`]: struct.Module.html#method.transfer",
                " # <weight>",
                " - Cheaper than transfer because account cannot be killed.",
                " - Base Weight: 51.4 µs",
                " - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                " #</weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Endowed",
              "args": ["AccountId", "Balance"],
              "documentation": [" An account was created with some free balance."]
            },
            {
              "name": "DustLost",
              "args": ["AccountId", "Balance"],
              "documentation": [
                " An account was removed whose balance was non-zero but below ExistentialDeposit,",
                " resulting in an outright loss."
              ]
            },
            {
              "name": "Transfer",
              "args": ["AccountId", "AccountId", "Balance"],
              "documentation": [" Transfer succeeded (from, to, value)."]
            },
            {
              "name": "BalanceSet",
              "args": ["AccountId", "Balance", "Balance"],
              "documentation": [" A balance was set by root (who, free, reserved)."]
            },
            {
              "name": "Deposit",
              "args": ["AccountId", "Balance"],
              "documentation": [" Some amount was deposited (e.g. for transaction fees)."]
            }
          ],
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": "Balance",
              "value": "0x0080c6a47e8d03000000000000000000",
              "documentation": [" The minimum amount required to keep an account open."]
            }
          ],
          "errors": [
            { "name": "VestingBalance", "documentation": [" Vesting balance too high to send value"] },
            {
              "name": "LiquidityRestrictions",
              "documentation": [" Account liquidity restrictions prevent withdrawal"]
            },
            { "name": "Overflow", "documentation": [" Got an overflow after adding"] },
            { "name": "InsufficientBalance", "documentation": [" Balance too low to send value"] },
            {
              "name": "ExistentialDeposit",
              "documentation": [" Value too low to create account due to existential deposit"]
            },
            { "name": "KeepAlive", "documentation": [" Transfer/payment would kill account"] },
            {
              "name": "ExistingVestingSchedule",
              "documentation": [" A vesting schedule already exists for this account"]
            },
            { "name": "DeadAccount", "documentation": [" Beneficiary account must pre-exist"] }
          ]
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": { "Plain": "Multiplier" },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "type": "BalanceOf",
              "value": "0x00407a10f35a00000000000000000000",
              "documentation": [" The fee to be paid for making a transaction; the per-byte portion."]
            }
          ],
          "errors": []
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Default",
                "type": { "Plain": "AccountId" },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [" The `AccountId` of the sudo key."]
              }
            ]
          },
          "calls": [
            {
              "name": "sudo",
              "args": [{ "name": "call", "type": "Call" }],
              "documentation": [
                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB write (event).",
                " - Weight of derivative `call` execution + 10,000.",
                " # </weight>"
              ]
            },
            {
              "name": "sudo_unchecked_weight",
              "args": [
                { "name": "call", "type": "Call" },
                { "name": "_weight", "type": "Weight" }
              ],
              "documentation": [
                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                " This function does not check the weight of the call, and instead allows the",
                " Sudo user to specify the weight of the call.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - The weight of this call is defined by the caller.",
                " # </weight>"
              ]
            },
            {
              "name": "set_key",
              "args": [{ "name": "new", "type": "LookupSource" }],
              "documentation": [
                " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB change.",
                " # </weight>"
              ]
            },
            {
              "name": "sudo_as",
              "args": [
                { "name": "who", "type": "LookupSource" },
                { "name": "call", "type": "Call" }
              ],
              "documentation": [
                " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                " a given account.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB write (event).",
                " - Weight of derivative `call` execution + 10,000.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            { "name": "Sudid", "args": ["DispatchResult"], "documentation": [" A sudo just took place."] },
            {
              "name": "KeyChanged",
              "args": ["AccountId"],
              "documentation": [" The sudoer just switched identity; the old key is supplied."]
            },
            { "name": "SudoAsDone", "args": ["bool"], "documentation": [" A sudo just took place."] }
          ],
          "constants": [],
          "errors": [{ "name": "RequireSudo", "documentation": [" Sender must be the Sudo account"] }]
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "ReportIdOf", "value": "OffenceDetails", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" The primary structure that holds all offence records keyed by report identifiers."]
              },
              {
                "name": "DeferredOffences",
                "modifier": "Default",
                "type": { "Plain": "Vec<DeferredOffenceOf>" },
                "fallback": "0x00",
                "documentation": [
                  " Deferred reports that have been rejected by the offence handler and need to be submitted",
                  " at a later time."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "Kind",
                    "key2": "OpaqueTimeSlot",
                    "value": "Vec<ReportIdOf>",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": [" A vector of reports of the same kind that happened at the same time slot."]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "type": { "Map": { "hasher": "Twox64Concat", "key": "Kind", "value": "Bytes", "linked": false } },
                "fallback": "0x00",
                "documentation": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": [],
          "events": [
            {
              "name": "Offence",
              "args": ["Kind", "OpaqueTimeSlot", "bool"],
              "documentation": [
                " There is an offence reported of the given `kind` happened at the `session_index` and",
                " (kind-specific) time slot. This event is not deposited for duplicate slashes. last",
                " element indicates of the offence was applied (true) or queued (false)."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        { "name": "Historical", "storage": null, "calls": null, "events": null, "constants": [], "errors": [] },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "items": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "type": { "Plain": "Vec<Hash>" },
                "fallback": "0x00",
                "documentation": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": [],
          "events": null,
          "constants": [],
          "errors": []
        },
        {
          "name": "GeneralCouncil",
          "storage": {
            "prefix": "Instance1Collective",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": { "Plain": "Vec<Hash>" },
                "fallback": "0x00",
                "documentation": [" The hashes of the active proposals."]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": { "Map": { "hasher": "Identity", "key": "Hash", "value": "Proposal", "linked": false } },
                "fallback": "0x00",
                "documentation": [" Actual proposal for a given hash, if it's current."]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": { "Map": { "hasher": "Identity", "key": "Hash", "value": "Votes", "linked": false } },
                "fallback": "0x00",
                "documentation": [" Votes on a given proposal, if it is ongoing."]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": { "Plain": "u32" },
                "fallback": "0x00000000",
                "documentation": [" Proposals so far."]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": { "Plain": "Vec<AccountId>" },
                "fallback": "0x00",
                "documentation": [" The current members of the collective. This is stored sorted (just by value)."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": { "Plain": "AccountId" },
                "fallback": "0x00",
                "documentation": [
                  " The member who provides the default vote for any other members that do not vote before",
                  " the timeout. If None, then no member has that privilege."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_members",
              "args": [
                { "name": "new_members", "type": "Vec<AccountId>" },
                { "name": "prime", "type": "Option<AccountId>" },
                { "name": "old_count", "type": "MemberCount" }
              ],
              "documentation": [
                " Set the collective's membership.",
                "",
                " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                " - `prime`: The prime member whose vote sets the default.",
                " - `old_count`: The upper bound for the previous number of members in storage.",
                "                Used for weight estimation.",
                "",
                " Requires root origin.",
                "",
                " NOTE: Does not enforce the expected `MAX_MEMBERS` limit on the amount of members, but",
                "       the weight estimations rely on it to estimate dispatchable weight.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(MP + N)` where:",
                "   - `M` old-members-count (code- and governance-bounded)",
                "   - `N` new-members-count (code- and governance-bounded)",
                "   - `P` proposals-count (code-bounded)",
                " - DB:",
                "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                "   - 1 storage read (codec `O(P)`) for reading the proposals",
                "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                " # </weight>"
              ]
            },
            {
              "name": "execute",
              "args": [
                { "name": "proposal", "type": "Proposal" },
                { "name": "length_bound", "type": "Compact<u32>" }
              ],
              "documentation": [
                " Dispatch a proposal from a member using the `Member` origin.",
                "",
                " Origin must be a member of the collective.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                " - 1 event",
                " # </weight>"
              ]
            },
            {
              "name": "propose",
              "args": [
                { "name": "threshold", "type": "Compact<MemberCount>" },
                { "name": "proposal", "type": "Proposal" },
                { "name": "length_bound", "type": "Compact<u32>" }
              ],
              "documentation": [
                " Add a new proposal to either be voted on or executed directly.",
                "",
                " Requires the sender to be member.",
                "",
                " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                " or put up for voting.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                "   - `M` is members-count (code- and governance-bounded)",
                "   - branching is influenced by `threshold` where:",
                "     - `P1` is proposal execution complexity (`threshold < 2`)",
                "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                " - DB:",
                "   - 1 storage read `is_member` (codec `O(M)`)",
                "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                "   - DB accesses influenced by `threshold`:",
                "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                "     - OR proposal insertion (`threshold <= 2`)",
                "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                "       - 1 storage write `Voting` (codec `O(M)`)",
                "   - 1 event",
                " # </weight>"
              ]
            },
            {
              "name": "vote",
              "args": [
                { "name": "proposal", "type": "Hash" },
                { "name": "index", "type": "Compact<ProposalIndex>" },
                { "name": "approve", "type": "bool" }
              ],
              "documentation": [
                " Add an aye or nay vote for the sender to the given proposal.",
                "",
                " Requires the sender to be a member.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                " - DB:",
                "   - 1 storage read `Members` (codec `O(M)`)",
                "   - 1 storage mutation `Voting` (codec `O(M)`)",
                " - 1 event",
                " # </weight>"
              ]
            },
            {
              "name": "close",
              "args": [
                { "name": "proposal", "type": "Hash" },
                { "name": "index", "type": "Compact<ProposalIndex>" },
                { "name": "proposal_weight_bound", "type": "Compact<Weight>" },
                { "name": "length_bound", "type": "Compact<u32>" }
              ],
              "documentation": [
                " Close a vote that is either approved, disapproved or whose voting period has ended.",
                "",
                " May be called by any signed account in order to finish voting and close the proposal.",
                "",
                " If called before the end of the voting period it will only close the vote if it is",
                " has enough votes to be approved or disapproved.",
                "",
                " If called after the end of the voting period abstentions are counted as rejections",
                " unless there is a prime member set and the prime member cast an approval.",
                "",
                " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(B + M + P1 + P2)` where:",
                "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                "   - `M` is members-count (code- and governance-bounded)",
                "   - `P1` is the complexity of `proposal` preimage.",
                "   - `P2` is proposal-count (code-bounded)",
                " - DB:",
                "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                "  - any mutations done while executing `proposal` (`P1`)",
                " - up to 3 events",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Proposed",
              "args": ["AccountId", "ProposalIndex", "Hash", "MemberCount"],
              "documentation": [
                " A motion (given hash) has been proposed (by given account) with a threshold (given",
                " `MemberCount`)."
              ]
            },
            {
              "name": "Voted",
              "args": ["AccountId", "Hash", "bool", "MemberCount", "MemberCount"],
              "documentation": [
                " A motion (given hash) has been voted on by given account, leaving",
                " a tally (yes votes and no votes given respectively as `MemberCount`)."
              ]
            },
            {
              "name": "Approved",
              "args": ["Hash"],
              "documentation": [" A motion was approved by the required threshold."]
            },
            {
              "name": "Disapproved",
              "args": ["Hash"],
              "documentation": [" A motion was not approved by the required threshold."]
            },
            {
              "name": "Executed",
              "args": ["Hash", "DispatchResult"],
              "documentation": [" A motion was executed; `bool` is true if returned without error."]
            },
            {
              "name": "MemberExecuted",
              "args": ["Hash", "DispatchResult"],
              "documentation": [" A single member did some action; `bool` is true if returned without error."]
            },
            {
              "name": "Closed",
              "args": ["Hash", "MemberCount", "MemberCount"],
              "documentation": [" A proposal was closed after its duration was up."]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "NotMember", "documentation": [" Account is not a member"] },
            { "name": "DuplicateProposal", "documentation": [" Duplicate proposals not allowed"] },
            { "name": "ProposalMissing", "documentation": [" Proposal must exist"] },
            { "name": "WrongIndex", "documentation": [" Mismatched index"] },
            { "name": "DuplicateVote", "documentation": [" Duplicate vote ignored"] },
            { "name": "AlreadyInitialized", "documentation": [" Members are already initialized!"] },
            {
              "name": "TooEarly",
              "documentation": [" The close call is made too early, before the end of the voting."]
            },
            {
              "name": "TooManyProposals",
              "documentation": [" There can only be a maximum of `MaxProposals` active proposals."]
            },
            {
              "name": "WrongProposalWeight",
              "documentation": [" The given weight bound for the proposal was too low."]
            },
            {
              "name": "WrongProposalLength",
              "documentation": [" The given length bound for the proposal was too low."]
            }
          ]
        },
        {
          "name": "GeneralCouncilMembership",
          "storage": {
            "prefix": "Instance1Membership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": { "Plain": "Vec<AccountId>" },
                "fallback": "0x00",
                "documentation": [" The current membership, stored as an ordered Vec."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": { "Plain": "AccountId" },
                "fallback": "0x00",
                "documentation": [" The current prime member, if one exists."]
              }
            ]
          },
          "calls": [
            {
              "name": "add_member",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [" Add a member `who` to the set.", "", " May only be called from `AddOrigin` or root."]
            },
            {
              "name": "remove_member",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [
                " Remove a member `who` from the set.",
                "",
                " May only be called from `RemoveOrigin` or root."
              ]
            },
            {
              "name": "swap_member",
              "args": [
                { "name": "remove", "type": "AccountId" },
                { "name": "add", "type": "AccountId" }
              ],
              "documentation": [
                " Swap out one member `remove` for another `add`.",
                "",
                " May only be called from `SwapOrigin` or root.",
                "",
                " Prime membership is *not* passed from `remove` to `add`, if extant."
              ]
            },
            {
              "name": "reset_members",
              "args": [{ "name": "members", "type": "Vec<AccountId>" }],
              "documentation": [
                " Change the membership to a new set, disregarding the existing membership. Be nice and",
                " pass `members` pre-sorted.",
                "",
                " May only be called from `ResetOrigin` or root."
              ]
            },
            {
              "name": "change_key",
              "args": [{ "name": "new", "type": "AccountId" }],
              "documentation": [
                " Swap out the sending member for some other key `new`.",
                "",
                " May only be called from `Signed` origin of a current member.",
                "",
                " Prime membership is passed from the origin account to `new`, if extant."
              ]
            },
            {
              "name": "set_prime",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [" Set the prime member. Must be a current member."]
            },
            { "name": "clear_prime", "args": [], "documentation": [" Remove the prime member if it exists."] }
          ],
          "events": [
            {
              "name": "MemberAdded",
              "args": [],
              "documentation": [" The given member was added; see the transaction for who."]
            },
            {
              "name": "MemberRemoved",
              "args": [],
              "documentation": [" The given member was removed; see the transaction for who."]
            },
            {
              "name": "MembersSwapped",
              "args": [],
              "documentation": [" Two members were swapped; see the transaction for who."]
            },
            {
              "name": "MembersReset",
              "args": [],
              "documentation": [" The membership was reset; see the transaction for who the new set is."]
            },
            { "name": "KeyChanged", "args": [], "documentation": [" One of the members' keys changed."] },
            { "name": "Dummy", "args": ["PhantomData"], "documentation": [" Phantom member, never used."] }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "FinancialCouncil",
          "storage": {
            "prefix": "Instance2Collective",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": { "Plain": "Vec<Hash>" },
                "fallback": "0x00",
                "documentation": [" The hashes of the active proposals."]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": { "Map": { "hasher": "Identity", "key": "Hash", "value": "Proposal", "linked": false } },
                "fallback": "0x00",
                "documentation": [" Actual proposal for a given hash, if it's current."]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": { "Map": { "hasher": "Identity", "key": "Hash", "value": "Votes", "linked": false } },
                "fallback": "0x00",
                "documentation": [" Votes on a given proposal, if it is ongoing."]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": { "Plain": "u32" },
                "fallback": "0x00000000",
                "documentation": [" Proposals so far."]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": { "Plain": "Vec<AccountId>" },
                "fallback": "0x00",
                "documentation": [" The current members of the collective. This is stored sorted (just by value)."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": { "Plain": "AccountId" },
                "fallback": "0x00",
                "documentation": [
                  " The member who provides the default vote for any other members that do not vote before",
                  " the timeout. If None, then no member has that privilege."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_members",
              "args": [
                { "name": "new_members", "type": "Vec<AccountId>" },
                { "name": "prime", "type": "Option<AccountId>" },
                { "name": "old_count", "type": "MemberCount" }
              ],
              "documentation": [
                " Set the collective's membership.",
                "",
                " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                " - `prime`: The prime member whose vote sets the default.",
                " - `old_count`: The upper bound for the previous number of members in storage.",
                "                Used for weight estimation.",
                "",
                " Requires root origin.",
                "",
                " NOTE: Does not enforce the expected `MAX_MEMBERS` limit on the amount of members, but",
                "       the weight estimations rely on it to estimate dispatchable weight.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(MP + N)` where:",
                "   - `M` old-members-count (code- and governance-bounded)",
                "   - `N` new-members-count (code- and governance-bounded)",
                "   - `P` proposals-count (code-bounded)",
                " - DB:",
                "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                "   - 1 storage read (codec `O(P)`) for reading the proposals",
                "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                " # </weight>"
              ]
            },
            {
              "name": "execute",
              "args": [
                { "name": "proposal", "type": "Proposal" },
                { "name": "length_bound", "type": "Compact<u32>" }
              ],
              "documentation": [
                " Dispatch a proposal from a member using the `Member` origin.",
                "",
                " Origin must be a member of the collective.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                " - 1 event",
                " # </weight>"
              ]
            },
            {
              "name": "propose",
              "args": [
                { "name": "threshold", "type": "Compact<MemberCount>" },
                { "name": "proposal", "type": "Proposal" },
                { "name": "length_bound", "type": "Compact<u32>" }
              ],
              "documentation": [
                " Add a new proposal to either be voted on or executed directly.",
                "",
                " Requires the sender to be member.",
                "",
                " `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                " or put up for voting.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                "   - `M` is members-count (code- and governance-bounded)",
                "   - branching is influenced by `threshold` where:",
                "     - `P1` is proposal execution complexity (`threshold < 2`)",
                "     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                " - DB:",
                "   - 1 storage read `is_member` (codec `O(M)`)",
                "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                "   - DB accesses influenced by `threshold`:",
                "     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                "     - OR proposal insertion (`threshold <= 2`)",
                "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                "       - 1 storage write `Voting` (codec `O(M)`)",
                "   - 1 event",
                " # </weight>"
              ]
            },
            {
              "name": "vote",
              "args": [
                { "name": "proposal", "type": "Hash" },
                { "name": "index", "type": "Compact<ProposalIndex>" },
                { "name": "approve", "type": "bool" }
              ],
              "documentation": [
                " Add an aye or nay vote for the sender to the given proposal.",
                "",
                " Requires the sender to be a member.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                " - DB:",
                "   - 1 storage read `Members` (codec `O(M)`)",
                "   - 1 storage mutation `Voting` (codec `O(M)`)",
                " - 1 event",
                " # </weight>"
              ]
            },
            {
              "name": "close",
              "args": [
                { "name": "proposal", "type": "Hash" },
                { "name": "index", "type": "Compact<ProposalIndex>" },
                { "name": "proposal_weight_bound", "type": "Compact<Weight>" },
                { "name": "length_bound", "type": "Compact<u32>" }
              ],
              "documentation": [
                " Close a vote that is either approved, disapproved or whose voting period has ended.",
                "",
                " May be called by any signed account in order to finish voting and close the proposal.",
                "",
                " If called before the end of the voting period it will only close the vote if it is",
                " has enough votes to be approved or disapproved.",
                "",
                " If called after the end of the voting period abstentions are counted as rejections",
                " unless there is a prime member set and the prime member cast an approval.",
                "",
                " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                "                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                "",
                " # <weight>",
                " ## Weight",
                " - `O(B + M + P1 + P2)` where:",
                "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                "   - `M` is members-count (code- and governance-bounded)",
                "   - `P1` is the complexity of `proposal` preimage.",
                "   - `P2` is proposal-count (code-bounded)",
                " - DB:",
                "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                "  - any mutations done while executing `proposal` (`P1`)",
                " - up to 3 events",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Proposed",
              "args": ["AccountId", "ProposalIndex", "Hash", "MemberCount"],
              "documentation": [
                " A motion (given hash) has been proposed (by given account) with a threshold (given",
                " `MemberCount`)."
              ]
            },
            {
              "name": "Voted",
              "args": ["AccountId", "Hash", "bool", "MemberCount", "MemberCount"],
              "documentation": [
                " A motion (given hash) has been voted on by given account, leaving",
                " a tally (yes votes and no votes given respectively as `MemberCount`)."
              ]
            },
            {
              "name": "Approved",
              "args": ["Hash"],
              "documentation": [" A motion was approved by the required threshold."]
            },
            {
              "name": "Disapproved",
              "args": ["Hash"],
              "documentation": [" A motion was not approved by the required threshold."]
            },
            {
              "name": "Executed",
              "args": ["Hash", "DispatchResult"],
              "documentation": [" A motion was executed; `bool` is true if returned without error."]
            },
            {
              "name": "MemberExecuted",
              "args": ["Hash", "DispatchResult"],
              "documentation": [" A single member did some action; `bool` is true if returned without error."]
            },
            {
              "name": "Closed",
              "args": ["Hash", "MemberCount", "MemberCount"],
              "documentation": [" A proposal was closed after its duration was up."]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "NotMember", "documentation": [" Account is not a member"] },
            { "name": "DuplicateProposal", "documentation": [" Duplicate proposals not allowed"] },
            { "name": "ProposalMissing", "documentation": [" Proposal must exist"] },
            { "name": "WrongIndex", "documentation": [" Mismatched index"] },
            { "name": "DuplicateVote", "documentation": [" Duplicate vote ignored"] },
            { "name": "AlreadyInitialized", "documentation": [" Members are already initialized!"] },
            {
              "name": "TooEarly",
              "documentation": [" The close call is made too early, before the end of the voting."]
            },
            {
              "name": "TooManyProposals",
              "documentation": [" There can only be a maximum of `MaxProposals` active proposals."]
            },
            {
              "name": "WrongProposalWeight",
              "documentation": [" The given weight bound for the proposal was too low."]
            },
            {
              "name": "WrongProposalLength",
              "documentation": [" The given length bound for the proposal was too low."]
            }
          ]
        },
        {
          "name": "FinancialCouncilMembership",
          "storage": {
            "prefix": "Instance2Membership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": { "Plain": "Vec<AccountId>" },
                "fallback": "0x00",
                "documentation": [" The current membership, stored as an ordered Vec."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": { "Plain": "AccountId" },
                "fallback": "0x00",
                "documentation": [" The current prime member, if one exists."]
              }
            ]
          },
          "calls": [
            {
              "name": "add_member",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [" Add a member `who` to the set.", "", " May only be called from `AddOrigin` or root."]
            },
            {
              "name": "remove_member",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [
                " Remove a member `who` from the set.",
                "",
                " May only be called from `RemoveOrigin` or root."
              ]
            },
            {
              "name": "swap_member",
              "args": [
                { "name": "remove", "type": "AccountId" },
                { "name": "add", "type": "AccountId" }
              ],
              "documentation": [
                " Swap out one member `remove` for another `add`.",
                "",
                " May only be called from `SwapOrigin` or root.",
                "",
                " Prime membership is *not* passed from `remove` to `add`, if extant."
              ]
            },
            {
              "name": "reset_members",
              "args": [{ "name": "members", "type": "Vec<AccountId>" }],
              "documentation": [
                " Change the membership to a new set, disregarding the existing membership. Be nice and",
                " pass `members` pre-sorted.",
                "",
                " May only be called from `ResetOrigin` or root."
              ]
            },
            {
              "name": "change_key",
              "args": [{ "name": "new", "type": "AccountId" }],
              "documentation": [
                " Swap out the sending member for some other key `new`.",
                "",
                " May only be called from `Signed` origin of a current member.",
                "",
                " Prime membership is passed from the origin account to `new`, if extant."
              ]
            },
            {
              "name": "set_prime",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [" Set the prime member. Must be a current member."]
            },
            { "name": "clear_prime", "args": [], "documentation": [" Remove the prime member if it exists."] }
          ],
          "events": [
            {
              "name": "MemberAdded",
              "args": [],
              "documentation": [" The given member was added; see the transaction for who."]
            },
            {
              "name": "MemberRemoved",
              "args": [],
              "documentation": [" The given member was removed; see the transaction for who."]
            },
            {
              "name": "MembersSwapped",
              "args": [],
              "documentation": [" Two members were swapped; see the transaction for who."]
            },
            {
              "name": "MembersReset",
              "args": [],
              "documentation": [" The membership was reset; see the transaction for who the new set is."]
            },
            { "name": "KeyChanged", "args": [], "documentation": [" One of the members' keys changed."] },
            { "name": "Dummy", "args": ["PhantomData"], "documentation": [" Phantom member, never used."] }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "Oracle",
          "storage": {
            "prefix": "Oracle",
            "items": [
              {
                "name": "RawValues",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "AccountId",
                    "key2": "OracleKey",
                    "value": "TimestampedValueOf",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": [" Raw values for each oracle operators"]
              },
              {
                "name": "IsUpdated",
                "modifier": "Default",
                "type": { "Map": { "hasher": "Twox64Concat", "key": "OracleKey", "value": "bool", "linked": false } },
                "fallback": "0x00",
                "documentation": [" True if Self::values(key) is up to date, otherwise the value is stale"]
              },
              {
                "name": "Values",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Twox64Concat",
                    "key": "OracleKey",
                    "value": "TimestampedValueOf",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [" Combined value, may not be up to date"]
              },
              {
                "name": "HasDispatched",
                "modifier": "Default",
                "type": { "Plain": "OrderedSet" },
                "fallback": "0x00",
                "documentation": [" If an oracle operator has feed a value in this block"]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": { "Plain": "OrderedSet" },
                "fallback": "0x00",
                "documentation": [" The current members of the collective. This is stored sorted (just by value)."]
              },
              {
                "name": "SessionKeys",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "AccountId", "value": "AuthorityId", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" Session key for oracle operators"]
              },
              {
                "name": "Nonces",
                "modifier": "Default",
                "type": { "Map": { "hasher": "Twox64Concat", "key": "AccountId", "value": "u32", "linked": false } },
                "fallback": "0x00000000",
                "documentation": []
              }
            ]
          },
          "calls": [
            {
              "name": "feed_values",
              "args": [
                { "name": "values", "type": "Vec<(OracleKey,OracleValue)>" },
                { "name": "index", "type": "Compact<u32>" },
                { "name": "_signature", "type": "Signature" }
              ],
              "documentation": []
            },
            { "name": "set_session_key", "args": [{ "name": "key", "type": "AuthorityId" }], "documentation": [] }
          ],
          "events": [
            {
              "name": "NewFeedData",
              "args": ["AccountId", "Vec<(OracleKey,OracleValue)>"],
              "documentation": [" New feed data is submitted (sender, values)"]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "NoPermission", "documentation": [] },
            { "name": "UpdateAlreadyDispatched", "documentation": [] }
          ]
        },
        {
          "name": "OperatorMembership",
          "storage": {
            "prefix": "Instance3Membership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": { "Plain": "Vec<AccountId>" },
                "fallback": "0x00",
                "documentation": [" The current membership, stored as an ordered Vec."]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": { "Plain": "AccountId" },
                "fallback": "0x00",
                "documentation": [" The current prime member, if one exists."]
              }
            ]
          },
          "calls": [
            {
              "name": "add_member",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [" Add a member `who` to the set.", "", " May only be called from `AddOrigin` or root."]
            },
            {
              "name": "remove_member",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [
                " Remove a member `who` from the set.",
                "",
                " May only be called from `RemoveOrigin` or root."
              ]
            },
            {
              "name": "swap_member",
              "args": [
                { "name": "remove", "type": "AccountId" },
                { "name": "add", "type": "AccountId" }
              ],
              "documentation": [
                " Swap out one member `remove` for another `add`.",
                "",
                " May only be called from `SwapOrigin` or root.",
                "",
                " Prime membership is *not* passed from `remove` to `add`, if extant."
              ]
            },
            {
              "name": "reset_members",
              "args": [{ "name": "members", "type": "Vec<AccountId>" }],
              "documentation": [
                " Change the membership to a new set, disregarding the existing membership. Be nice and",
                " pass `members` pre-sorted.",
                "",
                " May only be called from `ResetOrigin` or root."
              ]
            },
            {
              "name": "change_key",
              "args": [{ "name": "new", "type": "AccountId" }],
              "documentation": [
                " Swap out the sending member for some other key `new`.",
                "",
                " May only be called from `Signed` origin of a current member.",
                "",
                " Prime membership is passed from the origin account to `new`, if extant."
              ]
            },
            {
              "name": "set_prime",
              "args": [{ "name": "who", "type": "AccountId" }],
              "documentation": [" Set the prime member. Must be a current member."]
            },
            { "name": "clear_prime", "args": [], "documentation": [" Remove the prime member if it exists."] }
          ],
          "events": [
            {
              "name": "MemberAdded",
              "args": [],
              "documentation": [" The given member was added; see the transaction for who."]
            },
            {
              "name": "MemberRemoved",
              "args": [],
              "documentation": [" The given member was removed; see the transaction for who."]
            },
            {
              "name": "MembersSwapped",
              "args": [],
              "documentation": [" Two members were swapped; see the transaction for who."]
            },
            {
              "name": "MembersReset",
              "args": [],
              "documentation": [" The membership was reset; see the transaction for who the new set is."]
            },
            { "name": "KeyChanged", "args": [], "documentation": [" One of the members' keys changed."] },
            { "name": "Dummy", "args": ["PhantomData"], "documentation": [" Phantom member, never used."] }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "Utility",
          "storage": {
            "prefix": "Utility",
            "items": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "AccountId",
                    "key2": "[u8;32]",
                    "value": "Multisig",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": [" The set of open multisig operations."]
              }
            ]
          },
          "calls": [
            {
              "name": "batch",
              "args": [{ "name": "calls", "type": "Vec<Call>" }],
              "documentation": [
                " Send a batch of dispatch calls.",
                "",
                " This will execute until the first one fails and then stop.",
                "",
                " May be called from any origin.",
                "",
                " - `calls`: The calls to be dispatched from the same origin.",
                "",
                " # <weight>",
                " - Base weight: 14.39 + .987 * c µs",
                " - Plus the sum of the weights of the `calls`.",
                " - Plus one additional event. (repeat read/write)",
                " # </weight>",
                "",
                " This will return `Ok` in all circumstances. To determine the success of the batch, an",
                " event is deposited. If a call failed and the batch was interrupted, then the",
                " `BatchInterrupted` event is deposited, along with the number of successful calls made",
                " and the error of the failed call. If all were successful, then the `BatchCompleted`",
                " event is deposited."
              ]
            },
            {
              "name": "as_sub",
              "args": [
                { "name": "index", "type": "u16" },
                { "name": "call", "type": "Call" }
              ],
              "documentation": [
                " Send a call through an indexed pseudonym of the sender.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - Base weight: 2.861 µs",
                " - Plus the weight of the `call`",
                " # </weight>"
              ]
            },
            {
              "name": "as_multi",
              "args": [
                { "name": "threshold", "type": "u16" },
                { "name": "other_signatories", "type": "Vec<AccountId>" },
                { "name": "maybe_timepoint", "type": "Option<Timepoint>" },
                { "name": "call", "type": "Call" }
              ],
              "documentation": [
                " Register approval for a dispatch to be made from a deterministic composite account if",
                " approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                " If there are enough, then dispatch the call.",
                "",
                " Payment: `MultisigDepositBase` will be reserved if this is the first approval, plus",
                " `threshold` times `MultisigDepositFactor`. It is returned once this dispatch happens or",
                " is cancelled.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                " - `other_signatories`: The accounts (other than the sender) who can approve this",
                " dispatch. May not be empty.",
                " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                " not the first approval, then it must be `Some`, with the timepoint (block number and",
                " transaction index) of the first approval transaction.",
                " - `call`: The call to be executed.",
                "",
                " NOTE: Unless this is the final approval, you will generally want to use",
                " `approve_as_multi` instead, since it only requires a hash of the call.",
                "",
                " Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                " on success, result is `Ok` and the result from the interior call, if it was executed,",
                " may be found in the deposited `MultisigExecuted` event.",
                "",
                " # <weight>",
                " - `O(S + Z + Call)`.",
                " - Up to one balance-reserve or unreserve operation.",
                " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                " - One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                " - One encode & hash, both of complexity `O(S)`.",
                " - Up to one binary search and insert (`O(logS + S)`).",
                " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                " - One event.",
                " - The weight of the `call`.",
                " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                "   deposit taken for its lifetime of",
                "   `MultisigDepositBase + threshold * MultisigDepositFactor`.",
                " -------------------------------",
                " - Base Weight:",
                "     - Create: 46.55 + 0.089 * S µs",
                "     - Approve: 34.03 + .112 * S µs",
                "     - Complete: 40.36 + .225 * S µs",
                " - DB Weight:",
                "     - Reads: Multisig Storage, [Caller Account]",
                "     - Writes: Multisig Storage, [Caller Account]",
                " - Plus Call Weight",
                " # </weight>"
              ]
            },
            {
              "name": "approve_as_multi",
              "args": [
                { "name": "threshold", "type": "u16" },
                { "name": "other_signatories", "type": "Vec<AccountId>" },
                { "name": "maybe_timepoint", "type": "Option<Timepoint>" },
                { "name": "call_hash", "type": "[u8;32]" }
              ],
              "documentation": [
                " Register approval for a dispatch to be made from a deterministic composite account if",
                " approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                " Payment: `MultisigDepositBase` will be reserved if this is the first approval, plus",
                " `threshold` times `MultisigDepositFactor`. It is returned once this dispatch happens or",
                " is cancelled.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                " - `other_signatories`: The accounts (other than the sender) who can approve this",
                " dispatch. May not be empty.",
                " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                " not the first approval, then it must be `Some`, with the timepoint (block number and",
                " transaction index) of the first approval transaction.",
                " - `call_hash`: The hash of the call to be executed.",
                "",
                " NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                "",
                " # <weight>",
                " - `O(S)`.",
                " - Up to one balance-reserve or unreserve operation.",
                " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                " - One encode & hash, both of complexity `O(S)`.",
                " - Up to one binary search and insert (`O(logS + S)`).",
                " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                " - One event.",
                " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                "   deposit taken for its lifetime of",
                "   `MultisigDepositBase + threshold * MultisigDepositFactor`.",
                " ----------------------------------",
                " - Base Weight:",
                "     - Create: 44.71 + 0.088 * S",
                "     - Approve: 31.48 + 0.116 * S",
                " - DB Weight:",
                "     - Read: Multisig Storage, [Caller Account]",
                "     - Write: Multisig Storage, [Caller Account]",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_as_multi",
              "args": [
                { "name": "threshold", "type": "u16" },
                { "name": "other_signatories", "type": "Vec<AccountId>" },
                { "name": "timepoint", "type": "Timepoint" },
                { "name": "call_hash", "type": "[u8;32]" }
              ],
              "documentation": [
                " Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                " for this operation will be unreserved on success.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                " - `other_signatories`: The accounts (other than the sender) who can approve this",
                " dispatch. May not be empty.",
                " - `timepoint`: The timepoint (block number and transaction index) of the first approval",
                " transaction for this dispatch.",
                " - `call_hash`: The hash of the call to be executed.",
                "",
                " # <weight>",
                " - `O(S)`.",
                " - Up to one balance-reserve or unreserve operation.",
                " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                " - One encode & hash, both of complexity `O(S)`.",
                " - One event.",
                " - I/O: 1 read `O(S)`, one remove.",
                " - Storage: removes one item.",
                " ----------------------------------",
                " - Base Weight: 37.6 + 0.084 * S",
                " - DB Weight:",
                "     - Read: Multisig Storage, [Caller Account]",
                "     - Write: Multisig Storage, [Caller Account]",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "BatchInterrupted",
              "args": ["u32", "DispatchError"],
              "documentation": [
                " Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                " well as the error."
              ]
            },
            {
              "name": "BatchCompleted",
              "args": [],
              "documentation": [" Batch of dispatches completed fully with no error."]
            },
            {
              "name": "NewMultisig",
              "args": ["AccountId", "AccountId", "CallHash"],
              "documentation": [
                " A new multisig operation has begun. First param is the account that is approving,",
                " second is the multisig account, third is hash of the call."
              ]
            },
            {
              "name": "MultisigApproval",
              "args": ["AccountId", "Timepoint", "AccountId", "CallHash"],
              "documentation": [
                " A multisig operation has been approved by someone. First param is the account that is",
                " approving, third is the multisig account, fourth is hash of the call."
              ]
            },
            {
              "name": "MultisigExecuted",
              "args": ["AccountId", "Timepoint", "AccountId", "CallHash", "DispatchResult"],
              "documentation": [
                " A multisig operation has been executed. First param is the account that is",
                " approving, third is the multisig account, fourth is hash of the call to be executed."
              ]
            },
            {
              "name": "MultisigCancelled",
              "args": ["AccountId", "Timepoint", "AccountId", "CallHash"],
              "documentation": [
                " A multisig operation has been cancelled. First param is the account that is",
                " cancelling, third is the multisig account, fourth is hash of the call."
              ]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "ZeroThreshold", "documentation": [" Threshold is too low (zero)."] },
            { "name": "AlreadyApproved", "documentation": [" Call is already approved by this signatory."] },
            { "name": "NoApprovalsNeeded", "documentation": [" Call doesn't need any (more) approvals."] },
            { "name": "TooFewSignatories", "documentation": [" There are too few signatories in the list."] },
            { "name": "TooManySignatories", "documentation": [" There are too many signatories in the list."] },
            {
              "name": "SignatoriesOutOfOrder",
              "documentation": [" The signatories were provided out of order; they should be ordered."]
            },
            {
              "name": "SenderInSignatories",
              "documentation": [" The sender was contained in the other signatories; it shouldn't be."]
            },
            { "name": "NotFound", "documentation": [" Multisig operation not found when attempting to cancel."] },
            {
              "name": "NotOwner",
              "documentation": [" Only the account that originally created the multisig is able to cancel it."]
            },
            {
              "name": "NoTimepoint",
              "documentation": [" No timepoint was given, yet the multisig operation is already underway."]
            },
            {
              "name": "WrongTimepoint",
              "documentation": [" A different timepoint was given to the multisig operation that is underway."]
            },
            {
              "name": "UnexpectedTimepoint",
              "documentation": [" A timepoint was given, yet no multisig operation is underway."]
            }
          ]
        },
        {
          "name": "PalletTreasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": { "Plain": "ProposalIndex" },
                "fallback": "0x00000000",
                "documentation": [" Number of proposals that have been made."]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "ProposalIndex", "value": "Proposal", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" Proposals that have been made."]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": { "Plain": "Vec<ProposalIndex>" },
                "fallback": "0x00",
                "documentation": [" Proposal indices that have been approved but not yet awarded."]
              },
              {
                "name": "Tips",
                "modifier": "Optional",
                "type": { "Map": { "hasher": "Twox64Concat", "key": "Hash", "value": "OpenTip", "linked": false } },
                "fallback": "0x00",
                "documentation": [
                  " Tips that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "type": { "Map": { "hasher": "Identity", "key": "Hash", "value": "Bytes", "linked": false } },
                "fallback": "0x00",
                "documentation": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "propose_spend",
              "args": [
                { "name": "value", "type": "Compact<BalanceOf>" },
                { "name": "beneficiary", "type": "LookupSource" }
              ],
              "documentation": [
                " Put forward a suggestion for spending. A deposit proportional to the value",
                " is reserved and slashed if the proposal is rejected. It is returned once the",
                " proposal is awarded.",
                "",
                " # <weight>",
                " - Complexity: O(1)",
                " - DbReads: `ProposalCount`, `origin account`",
                " - DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                " # </weight>"
              ]
            },
            {
              "name": "reject_proposal",
              "args": [{ "name": "proposal_id", "type": "Compact<ProposalIndex>" }],
              "documentation": [
                " Reject a proposed spend. The original deposit will be slashed.",
                "",
                " # <weight>",
                " - Complexity: O(1)",
                " - DbReads: `Proposals`, `rejected proposer account`",
                " - DbWrites: `Proposals`, `rejected proposer account`",
                " # </weight>"
              ]
            },
            {
              "name": "approve_proposal",
              "args": [{ "name": "proposal_id", "type": "Compact<ProposalIndex>" }],
              "documentation": [
                " Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                " and the original deposit will be returned.",
                "",
                " # <weight>",
                " - Complexity: O(1).",
                " - DbReads: `Proposals`, `Approvals`",
                " - DbWrite: `Approvals`",
                " # </weight>"
              ]
            },
            {
              "name": "report_awesome",
              "args": [
                { "name": "reason", "type": "Bytes" },
                { "name": "who", "type": "AccountId" }
              ],
              "documentation": [
                " Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                " `TipReportDepositPerByte` for each byte in `reason`.",
                "",
                " - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                "   a UTF-8-encoded URL.",
                " - `who`: The account which should be credited for the tip.",
                "",
                " Emits `NewTip` if successful.",
                "",
                " # <weight>",
                " - Complexity: `O(R)` where `R` length of `reason`.",
                "   - encoding and hashing of 'reason'",
                " - DbReads: `Reasons`, `Tips`, `who account data`",
                " - DbWrites: `Tips`, `who account data`",
                " # </weight>"
              ]
            },
            {
              "name": "retract_tip",
              "args": [{ "name": "hash", "type": "Hash" }],
              "documentation": [
                " Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                "",
                " If successful, the original deposit will be unreserved.",
                "",
                " The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                " must have been reported by the signing account through `report_awesome` (and not",
                " through `tip_new`).",
                "",
                " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                "",
                " Emits `TipRetracted` if successful.",
                "",
                " # <weight>",
                " - Complexity: `O(1)`",
                "   - Depends on the length of `T::Hash` which is fixed.",
                " - DbReads: `Tips`, `origin account`",
                " - DbWrites: `Reasons`, `Tips`, `origin account`",
                " # </weight>"
              ]
            },
            {
              "name": "tip_new",
              "args": [
                { "name": "reason", "type": "Bytes" },
                { "name": "who", "type": "AccountId" },
                { "name": "tip_value", "type": "BalanceOf" }
              ],
              "documentation": [
                " Give a tip for something new; no finder's fee will be taken.",
                "",
                " The dispatch origin for this call must be _Signed_ and the signing account must be a",
                " member of the `Tippers` set.",
                "",
                " - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                "   a UTF-8-encoded URL.",
                " - `who`: The account which should be credited for the tip.",
                " - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                "   value of active tippers will be given to the `who`.",
                "",
                " Emits `NewTip` if successful.",
                "",
                " # <weight>",
                " - Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                "   - `O(T)`: decoding `Tipper` vec of length `T`",
                "     `T` is charged as upper bound given by `ContainsLengthBound`.",
                "     The actual cost depends on the implementation of `T::Tippers`.",
                "   - `O(R)`: hashing and encoding of reason of length `R`",
                " - DbReads: `Tippers`, `Reasons`",
                " - DbWrites: `Reasons`, `Tips`",
                " # </weight>"
              ]
            },
            {
              "name": "tip",
              "args": [
                { "name": "hash", "type": "Hash" },
                { "name": "tip_value", "type": "BalanceOf" }
              ],
              "documentation": [
                " Declare a tip value for an already-open tip.",
                "",
                " The dispatch origin for this call must be _Signed_ and the signing account must be a",
                " member of the `Tippers` set.",
                "",
                " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                "   account ID.",
                " - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                "   value of active tippers will be given to the `who`.",
                "",
                " Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                " has started.",
                "",
                " # <weight>",
                " - Complexity: `O(T)` where `T` is the number of tippers.",
                "   decoding `Tipper` vec of length `T`, insert tip and check closing,",
                "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                "   The actual cost depends on the implementation of `T::Tippers`.",
                "",
                "   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                "   is weighted as if almost full i.e of length `T-1`.",
                " - DbReads: `Tippers`, `Tips`",
                " - DbWrites: `Tips`",
                " # </weight>"
              ]
            },
            {
              "name": "close_tip",
              "args": [{ "name": "hash", "type": "Hash" }],
              "documentation": [
                " Close and payout a tip.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " The tip identified by `hash` must have finished its countdown period.",
                "",
                " - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                "",
                " # <weight>",
                " - Complexity: `O(T)` where `T` is the number of tippers.",
                "   decoding `Tipper` vec of length `T`.",
                "   `T` is charged as upper bound given by `ContainsLengthBound`.",
                "   The actual cost depends on the implementation of `T::Tippers`.",
                " - DbReads: `Tips`, `Tippers`, `tip finder`",
                " - DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                " # </weight>"
              ]
            }
          ],
          "events": [
            { "name": "Proposed", "args": ["ProposalIndex"], "documentation": [" New proposal."] },
            {
              "name": "Spending",
              "args": ["Balance"],
              "documentation": [" We have ended a spend period and will now allocate funds."]
            },
            {
              "name": "Awarded",
              "args": ["ProposalIndex", "Balance", "AccountId"],
              "documentation": [" Some funds have been allocated."]
            },
            {
              "name": "Rejected",
              "args": ["ProposalIndex", "Balance"],
              "documentation": [" A proposal was rejected; funds were slashed."]
            },
            { "name": "Burnt", "args": ["Balance"], "documentation": [" Some of our funds have been burnt."] },
            {
              "name": "Rollover",
              "args": ["Balance"],
              "documentation": [" Spending has finished; this is the amount that rolls over until next spend."]
            },
            { "name": "Deposit", "args": ["Balance"], "documentation": [" Some funds have been deposited."] },
            { "name": "NewTip", "args": ["Hash"], "documentation": [" A new tip suggestion has been opened."] },
            {
              "name": "TipClosing",
              "args": ["Hash"],
              "documentation": [" A tip suggestion has reached threshold and is closing."]
            },
            {
              "name": "TipClosed",
              "args": ["Hash", "AccountId", "Balance"],
              "documentation": [" A tip suggestion has been closed."]
            },
            { "name": "TipRetracted", "args": ["Hash"], "documentation": [" A tip suggestion has been retracted."] }
          ],
          "constants": [
            {
              "name": "ProposalBond",
              "type": "Permill",
              "value": "0x50c30000",
              "documentation": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": "BalanceOf",
              "value": "0x000064a7b3b6e00d0000000000000000",
              "documentation": [" Minimum amount of funds that should be placed in a deposit for making a proposal."]
            },
            {
              "name": "SpendPeriod",
              "type": "BlockNumber",
              "value": "0x60540000",
              "documentation": [" Period between successive spends."]
            },
            {
              "name": "Burn",
              "type": "Permill",
              "value": "0x00000000",
              "documentation": [" Percentage of spare funds (if any) that are burnt per spend period."]
            },
            {
              "name": "TipCountdown",
              "type": "BlockNumber",
              "value": "0x60540000",
              "documentation": [" The period for which a tip remains open after is has achieved threshold tippers."]
            },
            {
              "name": "TipFindersFee",
              "type": "Percent",
              "value": "0x0a",
              "documentation": [" The amount of the final tip which goes to the original reporter of the tip."]
            },
            {
              "name": "TipReportDepositBase",
              "type": "BalanceOf",
              "value": "0x000064a7b3b6e00d0000000000000000",
              "documentation": [" The amount held on deposit for placing a tip report."]
            },
            {
              "name": "TipReportDepositPerByte",
              "type": "BalanceOf",
              "value": "0x0000c16ff28623000000000000000000",
              "documentation": [" The amount held on deposit per byte within the tip report reason."]
            },
            {
              "name": "ModuleId",
              "type": "ModuleId",
              "value": "0x6c616d692f747279",
              "documentation": [" The treasury's module id, used for deriving its sovereign account ID."]
            }
          ],
          "errors": [
            { "name": "InsufficientProposersBalance", "documentation": [" Proposer's balance is too low."] },
            { "name": "InvalidProposalIndex", "documentation": [" No proposal at that index."] },
            { "name": "ReasonTooBig", "documentation": [" The reason given is just too big."] },
            { "name": "AlreadyKnown", "documentation": [" The tip was already found/started."] },
            { "name": "UnknownTip", "documentation": [" The tip hash is unknown."] },
            {
              "name": "NotFinder",
              "documentation": [" The account attempting to retract the tip is not the finder of the tip."]
            },
            {
              "name": "StillOpen",
              "documentation": [" The tip cannot be claimed/closed because there are not enough tippers yet."]
            },
            {
              "name": "Premature",
              "documentation": [" The tip cannot be claimed/closed because it's still in the countdown period."]
            }
          ]
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "HistoryDepth",
                "modifier": "Default",
                "type": { "Plain": "u32" },
                "fallback": "0x54000000",
                "documentation": [
                  " Number of eras to keep in history.",
                  "",
                  " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                  "",
                  " Must be more than the number of eras delayed by session otherwise.",
                  " I.e. active era must always be in history.",
                  " I.e. `active_era > current_era - history_depth` must be guaranteed."
                ]
              },
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": { "Plain": "u32" },
                "fallback": "0x00000000",
                "documentation": [" The ideal number of staking participants."]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": { "Plain": "u32" },
                "fallback": "0x04000000",
                "documentation": [" Minimum number of staking participants before emergency conditions are imposed."]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": { "Plain": "Vec<AccountId>" },
                "fallback": "0x00",
                "documentation": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "AccountId", "value": "AccountId", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" Map from all locked \"stash\" accounts to the controller account."]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Blake2_128Concat", "key": "AccountId", "value": "StakingLedger", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "AccountId", "value": "RewardDestination", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" Where the reward payment should be made. Keyed by stash."]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "AccountId", "value": "ValidatorPrefs", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" The map from (wannabe) validator stash key to the preferences of that validator."]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "AccountId", "value": "Nominations", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [
                  " The map from nominator stash key to the set of stash keys of all validators to nominate."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "type": { "Plain": "EraIndex" },
                "fallback": "0x00",
                "documentation": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "type": { "Plain": "ActiveEraInfo" },
                "fallback": "0x00",
                "documentation": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era currently rewarded.",
                  " Validator set of this era must be equal to `SessionInterface::validators`."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "EraIndex", "value": "SessionIndex", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" The session index at which the era start for the last `HISTORY_DEPTH` eras."]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "Exposure",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x000000",
                "documentation": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "Exposure",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x000000",
                "documentation": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "ValidatorPrefs",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "EraIndex", "value": "BalanceOf", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "EraIndex", "value": "EraRewardPoints", "linked": false }
                },
                "fallback": "0x0000000000",
                "documentation": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "EraIndex", "value": "BalanceOf", "linked": false }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": { "Plain": "Forcing" },
                "fallback": "0x00",
                "documentation": [" Mode of era forcing."]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": { "Plain": "Perbill" },
                "fallback": "0x00000000",
                "documentation": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": { "Plain": "BalanceOf" },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Twox64Concat",
                    "key": "EraIndex",
                    "value": "Vec<UnappliedSlash>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [" All unapplied slashes that are queued for later."]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": { "Plain": "Vec<(EraIndex,SessionIndex)>" },
                "fallback": "0x00",
                "documentation": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "(Perbill,BalanceOf)",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "BalanceOf",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "AccountId", "value": "SlashingSpans", "linked": false }
                },
                "fallback": "0x00",
                "documentation": [" Slashing spans for stash accounts."]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Twox64Concat",
                    "key": "(AccountId,SpanIndex)",
                    "value": "SpanRecord",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "EarliestUnappliedSlash",
                "modifier": "Optional",
                "type": { "Plain": "EraIndex" },
                "fallback": "0x00",
                "documentation": [" The earliest era for which we have a pending, unapplied slash."]
              },
              {
                "name": "SnapshotValidators",
                "modifier": "Optional",
                "type": { "Plain": "Vec<AccountId>" },
                "fallback": "0x00",
                "documentation": [
                  " Snapshot of validators at the beginning of the current election window. This should only",
                  " have a value when [`EraElectionStatus`] == `ElectionStatus::Open(_)`."
                ]
              },
              {
                "name": "SnapshotNominators",
                "modifier": "Optional",
                "type": { "Plain": "Vec<AccountId>" },
                "fallback": "0x00",
                "documentation": [
                  " Snapshot of nominators at the beginning of the current election window. This should only",
                  " have a value when [`EraElectionStatus`] == `ElectionStatus::Open(_)`."
                ]
              },
              {
                "name": "QueuedElected",
                "modifier": "Optional",
                "type": { "Plain": "ElectionResult" },
                "fallback": "0x00",
                "documentation": [
                  " The next validator set. At the end of an era, if this is available (potentially from the",
                  " result of an offchain worker), it is immediately used. Otherwise, the on-chain election",
                  " is executed."
                ]
              },
              {
                "name": "QueuedScore",
                "modifier": "Optional",
                "type": { "Plain": "PhragmenScore" },
                "fallback": "0x00",
                "documentation": [" The score of the current [`QueuedElected`]."]
              },
              {
                "name": "EraElectionStatus",
                "modifier": "Default",
                "type": { "Plain": "ElectionStatus" },
                "fallback": "0x00",
                "documentation": [
                  " Flag to control the execution of the offchain election. When `Open(_)`, we accept",
                  " solutions to be submitted."
                ]
              },
              {
                "name": "IsCurrentSessionFinal",
                "modifier": "Default",
                "type": { "Plain": "bool" },
                "fallback": "0x00",
                "documentation": [
                  " True if the current **planned** session is final. Note that this does not take era",
                  " forcing into account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": { "Plain": "ReleasesStaking" },
                "fallback": "0x02",
                "documentation": [
                  " True if network has been upgraded to this version.",
                  " Storage version of the pallet.",
                  "",
                  " This is set to v3.0.0 for new networks."
                ]
              },
              {
                "name": "MigrateEra",
                "modifier": "Optional",
                "type": { "Plain": "EraIndex" },
                "fallback": "0x00",
                "documentation": [" The era where we migrated from Lazy Payouts to Simple Payouts"]
              }
            ]
          },
          "calls": [
            {
              "name": "bond",
              "args": [
                { "name": "controller", "type": "LookupSource" },
                { "name": "value", "type": "Compact<BalanceOf>" },
                { "name": "payee", "type": "RewardDestination" }
              ],
              "documentation": [
                " Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                " be the account that controls it.",
                "",
                " `value` must be more than the `minimum_balance` specified by `T::Currency`.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash account.",
                "",
                " Emits `Bonded`.",
                "",
                " # <weight>",
                " - Independent of the arguments. Moderate complexity.",
                " - O(1).",
                " - Three extra DB entries.",
                "",
                " NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                " unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                " ------------------",
                " Base Weight: 67.87 µs",
                " DB Weight:",
                " - Read: Bonded, Ledger, [Origin Account], Current Era, History Depth, Locks",
                " - Write: Bonded, Payee, [Origin Account], Locks, Ledger",
                " # </weight>"
              ]
            },
            {
              "name": "bond_extra",
              "args": [{ "name": "max_additional", "type": "Compact<BalanceOf>" }],
              "documentation": [
                " Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                " for staking.",
                "",
                " Use this if there are additional funds in your stash account that you wish to bond.",
                " Unlike [`bond`] or [`unbond`] this function does not impose any limitation on the amount",
                " that can be added.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash, not the controller and",
                " it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " Emits `Bonded`.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - O(1).",
                " - One DB entry.",
                " ------------",
                " Base Weight: 54.88 µs",
                " DB Weight:",
                " - Read: Era Election Status, Bonded, Ledger, [Origin Account], Locks",
                " - Write: [Origin Account], Locks, Ledger",
                " # </weight>"
              ]
            },
            {
              "name": "unbond",
              "args": [{ "name": "value", "type": "Compact<BalanceOf>" }],
              "documentation": [
                " Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                " period ends. If this leaves an amount actively bonded less than",
                " T::Currency::minimum_balance(), then it is increased to the full amount.",
                "",
                " Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                " the funds out of management ready for transfer.",
                "",
                " No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                " can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                " to be called first to remove some of the chunks (if possible).",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " Emits `Unbonded`.",
                "",
                " See also [`Call::withdraw_unbonded`].",
                "",
                " # <weight>",
                " - Independent of the arguments. Limited but potentially exploitable complexity.",
                " - Contains a limited number of reads.",
                " - Each call (requires the remainder of the bonded balance to be above `minimum_balance`)",
                "   will cause a new entry to be inserted into a vector (`Ledger.unlocking`) kept in storage.",
                "   The only way to clean the aforementioned storage item is also user-controlled via",
                "   `withdraw_unbonded`.",
                " - One DB entry.",
                " ----------",
                " Base Weight: 50.34 µs",
                " DB Weight:",
                " - Read: Era Election Status, Ledger, Current Era, Locks, [Origin Account]",
                " - Write: [Origin Account], Locks, Ledger",
                " </weight>"
              ]
            },
            {
              "name": "withdraw_unbonded",
              "args": [{ "name": "num_slashing_spans", "type": "u32" }],
              "documentation": [
                " Remove any unlocked chunks from the `unlocking` queue from our management.",
                "",
                " This essentially frees up that balance to be used by the stash account to do",
                " whatever it wants.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " Emits `Withdrawn`.",
                "",
                " See also [`Call::unbond`].",
                "",
                " # <weight>",
                " - Could be dependent on the `origin` argument and how much `unlocking` chunks exist.",
                "  It implies `consolidate_unlocked` which loops over `Ledger.unlocking`, which is",
                "  indirectly user-controlled. See [`unbond`] for more detail.",
                " - Contains a limited number of reads, yet the size of which could be large based on `ledger`.",
                " - Writes are limited to the `origin` account key.",
                " ---------------",
                " Complexity O(S) where S is the number of slashing spans to remove",
                " Base Weight:",
                " Update: 50.52 + .028 * S µs",
                " - Reads: EraElectionStatus, Ledger, Current Era, Locks, [Origin Account]",
                " - Writes: [Origin Account], Locks, Ledger",
                " Kill: 79.41 + 2.366 * S µs",
                " - Reads: EraElectionStatus, Ledger, Current Era, Bonded, Slashing Spans, [Origin Account], Locks",
                " - Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, [Origin Account], Locks",
                " - Writes Each: SpanSlash * S",
                " NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                " # </weight>"
              ]
            },
            {
              "name": "validate",
              "args": [{ "name": "prefs", "type": "ValidatorPrefs" }],
              "documentation": [
                " Declare the desire to validate for the origin controller.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " -----------",
                " Base Weight: 17.13 µs",
                " DB Weight:",
                " - Read: Era Election Status, Ledger",
                " - Write: Nominators, Validators",
                " # </weight>"
              ]
            },
            {
              "name": "nominate",
              "args": [{ "name": "targets", "type": "Vec<LookupSource>" }],
              "documentation": [
                " Declare the desire to nominate `targets` for the origin controller.",
                "",
                " Effects will be felt at the beginning of the next era. This can only be called when",
                " [`EraElectionStatus`] is `Closed`.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - The transaction's complexity is proportional to the size of `targets` (N)",
                " which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                " - Both the reads and writes follow a similar pattern.",
                " ---------",
                " Base Weight: 22.34 + .36 * N µs",
                " where N is the number of targets",
                " DB Weight:",
                " - Reads: Era Election Status, Ledger, Current Era",
                " - Writes: Validators, Nominators",
                " # </weight>"
              ]
            },
            {
              "name": "chill",
              "args": [],
              "documentation": [
                " Declare no desire to either validate or nominate.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains one read.",
                " - Writes are limited to the `origin` account key.",
                " --------",
                " Base Weight: 16.53 µs",
                " DB Weight:",
                " - Read: EraElectionStatus, Ledger",
                " - Write: Validators, Nominators",
                " # </weight>"
              ]
            },
            {
              "name": "set_payee",
              "args": [{ "name": "payee", "type": "RewardDestination" }],
              "documentation": [
                " (Re-)set the payment target for a controller.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " ---------",
                " - Base Weight: 11.33 µs",
                " - DB Weight:",
                "     - Read: Ledger",
                "     - Write: Payee",
                " # </weight>"
              ]
            },
            {
              "name": "set_controller",
              "args": [{ "name": "controller", "type": "LookupSource" }],
              "documentation": [
                " (Re-)set the controller of a stash.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " ----------",
                " Base Weight: 25.22 µs",
                " DB Weight:",
                " - Read: Bonded, Ledger New Controller, Ledger Old Controller",
                " - Write: Bonded, Ledger New Controller, Ledger Old Controller",
                " # </weight>"
              ]
            },
            {
              "name": "set_validator_count",
              "args": [{ "name": "new", "type": "Compact<u32>" }],
              "documentation": [
                " Sets the ideal number of validators.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " Base Weight: 1.717 µs",
                " Write: Validator Count",
                " # </weight>"
              ]
            },
            {
              "name": "force_no_eras",
              "args": [],
              "documentation": [
                " Force there to be no new eras indefinitely.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " - No arguments.",
                " - Base Weight: 1.857 µs",
                " - Write: ForceEra",
                " # </weight>"
              ]
            },
            {
              "name": "force_new_era",
              "args": [],
              "documentation": [
                " Force there to be a new era at the end of the next session. After this, it will be",
                " reset to normal (non-forced) behaviour.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " - No arguments.",
                " - Base Weight: 1.959 µs",
                " - Write ForceEra",
                " # </weight>"
              ]
            },
            {
              "name": "set_invulnerables",
              "args": [{ "name": "validators", "type": "Vec<AccountId>" }],
              "documentation": [
                " Set the validators who cannot be slashed (if any).",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " - O(V)",
                " - Base Weight: 2.208 + .006 * V µs",
                " - Write: Invulnerables",
                " # </weight>"
              ]
            },
            {
              "name": "force_unstake",
              "args": [
                { "name": "stash", "type": "AccountId" },
                { "name": "num_slashing_spans", "type": "u32" }
              ],
              "documentation": [
                " Force a current staker to become completely unstaked, immediately.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " O(S) where S is the number of slashing spans to be removed",
                " Base Weight: 53.07 + 2.365 * S µs",
                " Reads: Bonded, Slashing Spans, Account, Locks",
                " Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Account, Locks",
                " Writes Each: SpanSlash * S",
                " # </weight>"
              ]
            },
            {
              "name": "force_new_era_always",
              "args": [],
              "documentation": [
                " Force there to be a new era at the end of sessions indefinitely.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " - Base Weight: 2.05 µs",
                " - Write: ForceEra",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_deferred_slash",
              "args": [
                { "name": "era", "type": "EraIndex" },
                { "name": "slash_indices", "type": "Vec<u32>" }
              ],
              "documentation": [
                " Cancel enactment of a deferred slash.",
                "",
                " Can be called by either the root origin or the `T::SlashCancelOrigin`.",
                "",
                " Parameters: era and indices of the slashes for that era to kill.",
                "",
                " # <weight>",
                " Complexity: O(U + S)",
                " with U unapplied slashes weighted with U=1000",
                " and S is the number of slash indices to be canceled.",
                " - Base: 5870 + 34.61 * S µs",
                " - Read: Unapplied Slashes",
                " - Write: Unapplied Slashes",
                " # </weight>"
              ]
            },
            {
              "name": "payout_nominator",
              "args": [
                { "name": "era", "type": "EraIndex" },
                { "name": "validators", "type": "Vec<(AccountId,u32)>" }
              ],
              "documentation": [
                " **This extrinsic will be removed after `MigrationEra + HistoryDepth` has passed, giving",
                " opportunity for users to claim all rewards before moving to Simple Payouts. After this",
                " time, you should use `payout_stakers` instead.**",
                "",
                " Make one nominator's payout for one era.",
                "",
                " - `who` is the controller account of the nominator to pay out.",
                " - `era` may not be lower than one following the most recently paid era. If it is higher,",
                "   then it indicates an instruction to skip the payout of all previous eras.",
                " - `validators` is the list of all validators that `who` had exposure to during `era`,",
                "   alongside the index of `who` in the clipped exposure of the validator.",
                "   I.e. each element is a tuple of",
                "   `(validator, index of `who` in clipped exposure of validator)`.",
                "   If it is incomplete, then less than the full reward will be paid out.",
                "   It must not exceed `MAX_NOMINATIONS`.",
                "",
                " WARNING: once an era is payed for a validator such validator can't claim the payout of",
                " previous era.",
                "",
                " WARNING: Incorrect arguments here can result in loss of payout. Be very careful.",
                "",
                " # <weight>",
                " - Number of storage read of `O(validators)`; `validators` is the argument of the call,",
                "   and is bounded by `MAX_NOMINATIONS`.",
                " - Each storage read is `O(N)` size and decode complexity; `N` is the  maximum",
                "   nominations that can be given to a single validator.",
                " - Computation complexity: `O(MAX_NOMINATIONS * logN)`; `MAX_NOMINATIONS` is the",
                "   maximum number of validators that may be nominated by a single nominator, it is",
                "   bounded only economically (all nominators are required to place a minimum stake).",
                " # </weight>"
              ]
            },
            {
              "name": "payout_validator",
              "args": [{ "name": "era", "type": "EraIndex" }],
              "documentation": [
                " **This extrinsic will be removed after `MigrationEra + HistoryDepth` has passed, giving",
                " opportunity for users to claim all rewards before moving to Simple Payouts. After this",
                " time, you should use `payout_stakers` instead.**",
                "",
                " Make one validator's payout for one era.",
                "",
                " - `who` is the controller account of the validator to pay out.",
                " - `era` may not be lower than one following the most recently paid era. If it is higher,",
                "   then it indicates an instruction to skip the payout of all previous eras.",
                "",
                " WARNING: once an era is payed for a validator such validator can't claim the payout of",
                " previous era.",
                "",
                " WARNING: Incorrect arguments here can result in loss of payout. Be very careful.",
                "",
                " # <weight>",
                " - Time complexity: O(1).",
                " - Contains a limited number of reads and writes.",
                " # </weight>"
              ]
            },
            {
              "name": "payout_stakers",
              "args": [
                { "name": "validator_stash", "type": "AccountId" },
                { "name": "era", "type": "EraIndex" }
              ],
              "documentation": [
                " Pay out all the stakers behind a single validator for a single era.",
                "",
                " - `validator_stash` is the stash account of the validator. Their nominators, up to",
                "   `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                " - `era` may be any era between `[current_era - history_depth; current_era]`.",
                "",
                " The origin of this call must be _Signed_. Any account can call this function, even if",
                " it is not one of the stakers.",
                "",
                " This can only be called when [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                " - Contains a limited number of reads and writes.",
                " -----------",
                " N is the Number of payouts for the validator (including the validator)",
                " Base Weight: 110 + 54.2 * N µs (Median Slopes)",
                " DB Weight:",
                " - Read: EraElectionStatus, CurrentEra, HistoryDepth, MigrateEra, ErasValidatorReward,",
                "         ErasStakersClipped, ErasRewardPoints, ErasValidatorPrefs (8 items)",
                " - Read Each: Bonded, Ledger, Payee, Locks, System Account (5 items)",
                " - Write Each: System Account, Locks, Ledger (3 items)",
                " # </weight>"
              ]
            },
            {
              "name": "rebond",
              "args": [{ "name": "value", "type": "Compact<BalanceOf>" }],
              "documentation": [
                " Rebond a portion of the stash scheduled to be unlocked.",
                "",
                " The dispatch origin must be signed by the controller, and it can be only called when",
                " [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - Time complexity: O(L), where L is unlocking chunks",
                " - Bounded by `MAX_UNLOCKING_CHUNKS`.",
                " - Storage changes: Can't increase storage, only decrease it.",
                " ---------------",
                " - Base Weight: 34.51 µs * .048 L µs",
                " - DB Weight:",
                "     - Reads: EraElectionStatus, Ledger, Locks, [Origin Account]",
                "     - Writes: [Origin Account], Locks, Ledger",
                " # </weight>"
              ]
            },
            {
              "name": "set_history_depth",
              "args": [
                { "name": "new_history_depth", "type": "Compact<EraIndex>" },
                { "name": "_era_items_deleted", "type": "Compact<u32>" }
              ],
              "documentation": [
                " Set `HistoryDepth` value. This function will delete any history information",
                " when `HistoryDepth` is reduced.",
                "",
                " Parameters:",
                " - `new_history_depth`: The new history depth you would like to set.",
                " - `era_items_deleted`: The number of items that will be deleted by this dispatch.",
                "    This should report all the storage items that will be deleted by clearing old",
                "    era history. Needed to report an accurate weight for the dispatch. Trusted by",
                "    `Root` to report an accurate number.",
                "",
                " Origin must be root.",
                "",
                " # <weight>",
                " - E: Number of history depths removed, i.e. 10 -> 7 = 3",
                " - Base Weight: 29.13 * E µs",
                " - DB Weight:",
                "     - Reads: Current Era, History Depth",
                "     - Writes: History Depth",
                "     - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                "     - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake, ErasStartSessionIndex",
                " # </weight>"
              ]
            },
            {
              "name": "reap_stash",
              "args": [
                { "name": "stash", "type": "AccountId" },
                { "name": "num_slashing_spans", "type": "u32" }
              ],
              "documentation": [
                " Remove all data structure concerning a staker/stash once its balance is zero.",
                " This is essentially equivalent to `withdraw_unbonded` except it can be called by anyone",
                " and the target `stash` must have no funds left.",
                "",
                " This can be called from any origin.",
                "",
                " - `stash`: The stash account to reap. Its balance must be zero.",
                "",
                " # <weight>",
                " Complexity: O(S) where S is the number of slashing spans on the account.",
                " Base Weight: 75.94 + 2.396 * S µs",
                " DB Weight:",
                " - Reads: Stash Account, Bonded, Slashing Spans, Locks",
                " - Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Stash Account, Locks",
                " - Writes Each: SpanSlash * S",
                " # </weight>"
              ]
            },
            {
              "name": "submit_election_solution",
              "args": [
                { "name": "winners", "type": "Vec<ValidatorIndex>" },
                { "name": "compact_assignments", "type": "CompactAssignments" },
                { "name": "score", "type": "PhragmenScore" },
                { "name": "era", "type": "EraIndex" }
              ],
              "documentation": [
                " Submit a phragmen result to the chain. If the solution:",
                "",
                " 1. is valid.",
                " 2. has a better score than a potentially existing solution on chain.",
                "",
                " then, it will be _put_ on chain.",
                "",
                " A solution consists of two pieces of data:",
                "",
                " 1. `winners`: a flat vector of all the winners of the round.",
                " 2. `assignments`: the compact version of an assignment vector that encodes the edge",
                "    weights.",
                "",
                " Both of which may be computed using [`phragmen`], or any other algorithm.",
                "",
                " Additionally, the submitter must provide:",
                "",
                " - The `score` that they claim their solution has.",
                "",
                " Both validators and nominators will be represented by indices in the solution. The",
                " indices should respect the corresponding types ([`ValidatorIndex`] and",
                " [`NominatorIndex`]). Moreover, they should be valid when used to index into",
                " [`SnapshotValidators`] and [`SnapshotNominators`]. Any invalid index will cause the",
                " solution to be rejected. These two storage items are set during the election window and",
                " may be used to determine the indices.",
                "",
                " A solution is valid if:",
                "",
                " 0. It is submitted when [`EraElectionStatus`] is `Open`.",
                " 1. Its claimed score is equal to the score computed on-chain.",
                " 2. Presents the correct number of winners.",
                " 3. All indexes must be value according to the snapshot vectors. All edge values must",
                "    also be correct and should not overflow the granularity of the ratio type (i.e. 256",
                "    or billion).",
                " 4. For each edge, all targets are actually nominated by the voter.",
                " 5. Has correct self-votes.",
                "",
                " A solutions score is consisted of 3 parameters:",
                "",
                " 1. `min { support.total }` for each support of a winner. This value should be maximized.",
                " 2. `sum { support.total }` for each support of a winner. This value should be minimized.",
                " 3. `sum { support.total^2 }` for each support of a winner. This value should be",
                "    minimized (to ensure less variance)",
                "",
                " # <weight>",
                " E: number of edges. m: size of winner committee. n: number of nominators. d: edge degree",
                " (16 for now) v: number of on-chain validator candidates.",
                "",
                " NOTE: given a solution which is reduced, we can enable a new check the ensure `|E| < n +",
                " m`. We don't do this _yet_, but our offchain worker code executes it nonetheless.",
                "",
                " major steps (all done in `check_and_replace_solution`):",
                "",
                " - Storage: O(1) read `ElectionStatus`.",
                " - Storage: O(1) read `PhragmenScore`.",
                " - Storage: O(1) read `ValidatorCount`.",
                " - Storage: O(1) length read from `SnapshotValidators`.",
                "",
                " - Storage: O(v) reads of `AccountId` to fetch `snapshot_validators`.",
                " - Memory: O(m) iterations to map winner index to validator id.",
                " - Storage: O(n) reads `AccountId` to fetch `snapshot_nominators`.",
                " - Memory: O(n + m) reads to map index to `AccountId` for un-compact.",
                "",
                " - Storage: O(e) accountid reads from `Nomination` to read correct nominations.",
                " - Storage: O(e) calls into `slashable_balance_of_vote_weight` to convert ratio to staked.",
                "",
                " - Memory: build_support_map. O(e).",
                " - Memory: evaluate_support: O(E).",
                "",
                " - Storage: O(e) writes to `QueuedElected`.",
                " - Storage: O(1) write to `QueuedScore`",
                "",
                " The weight of this call is 1/10th of the blocks total weight.",
                " # </weight>"
              ]
            },
            {
              "name": "submit_election_solution_unsigned",
              "args": [
                { "name": "winners", "type": "Vec<ValidatorIndex>" },
                { "name": "compact_assignments", "type": "CompactAssignments" },
                { "name": "score", "type": "PhragmenScore" },
                { "name": "era", "type": "EraIndex" }
              ],
              "documentation": [
                " Unsigned version of `submit_election_solution`.",
                "",
                " Note that this must pass the [`ValidateUnsigned`] check which only allows transactions",
                " from the local node to be included. In other words, only the block author can include a",
                " transaction in the block."
              ]
            }
          ],
          "events": [
            {
              "name": "EraPayout",
              "args": ["EraIndex", "Balance", "Balance"],
              "documentation": [
                " The era payout has been set; the first balance is the validator-payout; the second is",
                " the remainder from the maximum amount of reward."
              ]
            },
            {
              "name": "Reward",
              "args": ["AccountId", "Balance"],
              "documentation": [" The staker has been rewarded by this amount. `AccountId` is the stash account."]
            },
            {
              "name": "Slash",
              "args": ["AccountId", "Balance"],
              "documentation": [" One validator (and its nominators) has been slashed by the given amount."]
            },
            {
              "name": "OldSlashingReportDiscarded",
              "args": ["SessionIndex"],
              "documentation": [
                " An old slashing report from a prior era was discarded because it could",
                " not be processed."
              ]
            },
            {
              "name": "StakingElection",
              "args": ["ElectionCompute"],
              "documentation": [" A new set of stakers was elected with the given computation method."]
            },
            {
              "name": "Bonded",
              "args": ["AccountId", "Balance"],
              "documentation": [
                " An account has bonded this amount.",
                "",
                " NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                " it will not be emitted for staking rewards when they are added to stake."
              ]
            },
            {
              "name": "Unbonded",
              "args": ["AccountId", "Balance"],
              "documentation": [" An account has unbonded this amount."]
            },
            {
              "name": "Withdrawn",
              "args": ["AccountId", "Balance"],
              "documentation": [
                " An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                " from the unlocking queue."
              ]
            }
          ],
          "constants": [
            {
              "name": "SessionsPerEra",
              "type": "SessionIndex",
              "value": "0x03000000",
              "documentation": [" Number of sessions per era."]
            },
            {
              "name": "BondingDuration",
              "type": "EraIndex",
              "value": "0x04000000",
              "documentation": [" Number of eras that staked funds must remain bonded for."]
            }
          ],
          "errors": [
            { "name": "NotController", "documentation": [" Not a controller account."] },
            { "name": "NotStash", "documentation": [" Not a stash account."] },
            { "name": "AlreadyBonded", "documentation": [" Stash is already bonded."] },
            { "name": "AlreadyPaired", "documentation": [" Controller is already paired."] },
            { "name": "EmptyTargets", "documentation": [" Targets cannot be empty."] },
            { "name": "DuplicateIndex", "documentation": [" Duplicate index."] },
            { "name": "InvalidSlashIndex", "documentation": [" Slash record index out of bounds."] },
            { "name": "InsufficientValue", "documentation": [" Can not bond with value less than minimum balance."] },
            { "name": "NoMoreChunks", "documentation": [" Can not schedule more unlock chunks."] },
            { "name": "NoUnlockChunk", "documentation": [" Can not rebond without unlocking chunks."] },
            { "name": "FundedTarget", "documentation": [" Attempting to target a stash that still has funds."] },
            { "name": "InvalidEraToReward", "documentation": [" Invalid era to reward."] },
            { "name": "InvalidNumberOfNominations", "documentation": [" Invalid number of nominations."] },
            { "name": "NotSortedAndUnique", "documentation": [" Items are not sorted and unique."] },
            {
              "name": "AlreadyClaimed",
              "documentation": [" Rewards for this era have already been claimed for this validator."]
            },
            {
              "name": "PhragmenEarlySubmission",
              "documentation": [" The submitted result is received out of the open window."]
            },
            {
              "name": "PhragmenWeakSubmission",
              "documentation": [" The submitted result is not as good as the one stored on chain."]
            },
            {
              "name": "SnapshotUnavailable",
              "documentation": [" The snapshot data of the current window is missing."]
            },
            { "name": "PhragmenBogusWinnerCount", "documentation": [" Incorrect number of winners were presented."] },
            {
              "name": "PhragmenBogusWinner",
              "documentation": [
                " One of the submitted winners is not an active candidate on chain (index is out of range",
                " in snapshot)."
              ]
            },
            {
              "name": "PhragmenBogusCompact",
              "documentation": [
                " Error while building the assignment type from the compact. This can happen if an index",
                " is invalid, or if the weights _overflow_."
              ]
            },
            {
              "name": "PhragmenBogusNominator",
              "documentation": [" One of the submitted nominators is not an active nominator on chain."]
            },
            {
              "name": "PhragmenBogusNomination",
              "documentation": [" One of the submitted nominators has an edge to which they have not voted on chain."]
            },
            {
              "name": "PhragmenSlashedNomination",
              "documentation": [
                " One of the submitted nominators has an edge which is submitted before the last non-zero",
                " slash of the target."
              ]
            },
            {
              "name": "PhragmenBogusSelfVote",
              "documentation": [" A self vote must only be originated from a validator to ONLY themselves."]
            },
            {
              "name": "PhragmenBogusEdge",
              "documentation": [" The submitted result has unknown edges that are not among the presented winners."]
            },
            {
              "name": "PhragmenBogusScore",
              "documentation": [" The claimed score does not match with the one computed from the data."]
            },
            {
              "name": "CallNotAllowed",
              "documentation": [" The call is not allowed at the given time due to restrictions of election period."]
            },
            { "name": "IncorrectHistoryDepth", "documentation": [" Incorrect previous history depth input provided."] },
            { "name": "IncorrectSlashingSpans", "documentation": [" Incorrect number of slashing spans provided."] }
          ]
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": { "Plain": "Vec<ValidatorId>" },
                "fallback": "0x00",
                "documentation": [" The current set of validators."]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": { "Plain": "SessionIndex" },
                "fallback": "0x00000000",
                "documentation": [" Current index of the session."]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": { "Plain": "bool" },
                "fallback": "0x00",
                "documentation": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": { "Plain": "Vec<(ValidatorId,Keys)>" },
                "fallback": "0x00",
                "documentation": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": { "Plain": "Vec<u32>" },
                "fallback": "0x00",
                "documentation": [
                  " Indices of disabled validators.",
                  "",
                  " The set is cleared when `on_session_ending` returns a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": { "Map": { "hasher": "Twox64Concat", "key": "ValidatorId", "value": "Keys", "linked": false } },
                "fallback": "0x00",
                "documentation": [" The next session keys for a validator."]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Twox64Concat",
                    "key": "(KeyTypeId,Bytes)",
                    "value": "ValidatorId",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [" The owner of a key. The key is the `KeyTypeId` + the encoded key."]
              }
            ]
          },
          "calls": [
            {
              "name": "set_keys",
              "args": [
                { "name": "keys", "type": "Keys" },
                { "name": "proof", "type": "Bytes" }
              ],
              "documentation": [
                " Sets the session key(s) of the function caller to `keys`.",
                " Allows an account to set its session key prior to becoming a validator.",
                " This doesn't take effect until the next session.",
                "",
                " The dispatch origin of this function must be signed.",
                "",
                " # <weight>",
                " - Complexity: `O(1)`",
                "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                " - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                " - DbWrites: `origin account`, `NextKeys`",
                " - DbReads per key id: `KeyOwner`",
                " - DbWrites per key id: `KeyOwner`",
                " # </weight>"
              ]
            },
            {
              "name": "purge_keys",
              "args": [],
              "documentation": [
                " Removes any session key(s) of the function caller.",
                " This doesn't take effect until the next session.",
                "",
                " The dispatch origin of this function must be signed.",
                "",
                " # <weight>",
                " - Complexity: `O(1)` in number of key types.",
                "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                " - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                " - DbWrites: `NextKeys`, `origin account`",
                " - DbWrites per key id: `KeyOwnder`",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "NewSession",
              "args": ["SessionIndex"],
              "documentation": [
                " New session has happened. Note that the argument is the session index, not the block",
                " number as the type might suggest."
              ]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "InvalidProof", "documentation": [" Invalid ownership proof."] },
            { "name": "NoAssociatedValidatorId", "documentation": [" No associated validator ID for account."] },
            { "name": "DuplicatedKey", "documentation": [" Registered duplicate key."] },
            { "name": "NoKeys", "documentation": [" No keys are associated with this account."] }
          ]
        },
        {
          "name": "Tokens",
          "storage": {
            "prefix": "Tokens",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "CurrencyId", "value": "Balance", "linked": false }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [" The total issuance of a token type."]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "CurrencyId",
                    "key2": "AccountId",
                    "value": "Vec<BalanceLock>",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Any liquidity locks of a token type under an account.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "CurrencyId",
                    "key2": "AccountId",
                    "value": "AccountData",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " The balance of a token type under an account.",
                  "",
                  " NOTE: If the total is ever zero, decrease account ref account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store balances."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "transfer",
              "args": [
                { "name": "dest", "type": "LookupSource" },
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "amount", "type": "Compact<Balance>" }
              ],
              "documentation": [
                " Transfer some balance to another account.",
                "",
                " The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                " # <weight>",
                " - Complexity: `O(1)`",
                " - Db reads: 2 * `Accounts`",
                " - Db writes: 2 * `Accounts`",
                " -------------------",
                " Base Weight: 26.65 µs",
                " # </weight>"
              ]
            },
            {
              "name": "transfer_all",
              "args": [
                { "name": "dest", "type": "LookupSource" },
                { "name": "currency_id", "type": "CurrencyId" }
              ],
              "documentation": [
                " Transfer all remaining balance to the given account.",
                "",
                " The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                " # <weight>",
                " - Complexity: `O(1)`",
                " - Db reads: 2 * `Accounts`",
                " - Db writes: 2 * `Accounts`",
                " -------------------",
                " Base Weight: 26.99 µs",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Transferred",
              "args": ["CurrencyId", "AccountId", "AccountId", "Balance"],
              "documentation": [" Token transfer success (currency_id, from, to, amount)"]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "BalanceTooLow", "documentation": [] },
            { "name": "TotalIssuanceOverflow", "documentation": [] },
            { "name": "AmountIntoBalanceFailed", "documentation": [] },
            { "name": "LiquidityRestrictions", "documentation": [] }
          ]
        },
        {
          "name": "Currencies",
          "storage": null,
          "calls": [
            {
              "name": "transfer",
              "args": [
                { "name": "dest", "type": "LookupSource" },
                { "name": "currency_id", "type": "CurrencyIdOf" },
                { "name": "amount", "type": "Compact<BalanceOf>" }
              ],
              "documentation": [
                " Transfer some balance to another account under `currency_id`.",
                "",
                " The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                " # <weight>",
                " - Preconditions:",
                " \t- T::MultiCurrency is orml_tokens",
                "\t\t- T::NativeCurrency is pallet_balances",
                " - Complexity: `O(1)`",
                " - Db reads: 2 * `Accounts`",
                " - Db writes: 2 * `Accounts`",
                " -------------------",
                " Base Weight:",
                "\t\t- non-native currency: 26.72 µs",
                "\t\t- native currency in worst case: 29.9 µs",
                " # </weight>"
              ]
            },
            {
              "name": "transfer_native_currency",
              "args": [
                { "name": "dest", "type": "LookupSource" },
                { "name": "amount", "type": "Compact<BalanceOf>" }
              ],
              "documentation": [
                " Transfer some native currency to another account.",
                "",
                " The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                " # <weight>",
                " - Preconditions:",
                " \t- T::MultiCurrency is orml_tokens",
                "\t\t- T::NativeCurrency is pallet_balances",
                " - Complexity: `O(1)`",
                " - Db reads: 2 * `Accounts`",
                " - Db writes: 2 * `Accounts`",
                " -------------------",
                " Base Weight: 29.53 µs",
                " # </weight>"
              ]
            },
            {
              "name": "update_balance",
              "args": [
                { "name": "who", "type": "LookupSource" },
                { "name": "currency_id", "type": "CurrencyIdOf" },
                { "name": "amount", "type": "AmountOf" }
              ],
              "documentation": [
                " update amount of account `who` under `currency_id`.",
                "",
                " The dispatch origin of this call must be _Root_.",
                "",
                " # <weight>",
                " - Preconditions:",
                " \t- T::MultiCurrency is orml_tokens",
                "\t\t- T::NativeCurrency is pallet_balances",
                " - Complexity: `O(1)`",
                " - Db reads: `Accounts`",
                " - Db writes: `Accounts`",
                " -------------------",
                " Base Weight:",
                " \t- non-native currency: 25.36 µs",
                "\t\t- native currency and killing account: 26.33 µs",
                "\t\t- native currency and create account: 27.39 µs",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Transferred",
              "args": ["CurrencyId", "AccountId", "AccountId", "Balance"],
              "documentation": [" Currency transfer success (currency_id, from, to, amount)"]
            },
            {
              "name": "BalanceUpdated",
              "args": ["CurrencyId", "AccountId", "Amount"],
              "documentation": [" Update balance success (currency_id, who, amount)"]
            },
            {
              "name": "Deposited",
              "args": ["CurrencyId", "AccountId", "Balance"],
              "documentation": [" Deposit success (currency_id, who, amount)"]
            },
            {
              "name": "Withdrawn",
              "args": ["CurrencyId", "AccountId", "Balance"],
              "documentation": [" Withdraw success (currency_id, who, amount)"]
            }
          ],
          "constants": [{ "name": "NativeCurrencyId", "type": "CurrencyIdOf", "value": "0x00", "documentation": [] }],
          "errors": [
            { "name": "AmountIntoBalanceFailed", "documentation": [] },
            { "name": "BalanceTooLow", "documentation": [] }
          ]
        },
        {
          "name": "SyntheticTokens",
          "storage": {
            "prefix": "SyntheticTokens",
            "items": [
              {
                "name": "ExtremeRatio",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "CurrencyId", "value": "Permill", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "LiquidationRatio",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "CurrencyId", "value": "Permill", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "CollateralRatio",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "CurrencyId", "value": "Permill", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "Positions",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "LiquidityPoolId",
                    "key2": "CurrencyId",
                    "value": "SyntheticPosition",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": []
              }
            ]
          },
          "calls": [
            {
              "name": "set_extreme_ratio",
              "args": [
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "ratio", "type": "Compact<Permill>" }
              ],
              "documentation": []
            },
            {
              "name": "set_liquidation_ratio",
              "args": [
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "ratio", "type": "Compact<Permill>" }
              ],
              "documentation": []
            },
            {
              "name": "set_collateral_ratio",
              "args": [
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "ratio", "type": "Compact<Permill>" }
              ],
              "documentation": []
            }
          ],
          "events": [
            {
              "name": "ExtremeRatioUpdated",
              "args": ["CurrencyId", "Permill"],
              "documentation": [" Extreme ratio updated. (currency_id, ratio)"]
            },
            {
              "name": "LiquidationRatioUpdated",
              "args": ["CurrencyId", "Permill"],
              "documentation": [" Liquidation ratio updated. (currency_id, ratio)"]
            },
            {
              "name": "CollateralRatioUpdated",
              "args": ["CurrencyId", "Permill"],
              "documentation": [" Collateral ratio updated. (currency_id, ratio)"]
            }
          ],
          "constants": [
            { "name": "DefaultExtremeRatio", "type": "Permill", "value": "0x10270000", "documentation": [] },
            { "name": "DefaultLiquidationRatio", "type": "Permill", "value": "0x50c30000", "documentation": [] },
            { "name": "DefaultCollateralRatio", "type": "Permill", "value": "0xa0860100", "documentation": [] },
            {
              "name": "SyntheticCurrencyIds",
              "type": "Vec<CurrencyId>",
              "value": "0x240203060708090a0405",
              "documentation": []
            }
          ],
          "errors": []
        },
        {
          "name": "SyntheticProtocol",
          "storage": null,
          "calls": [
            {
              "name": "mint",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "collateral_amount", "type": "Compact<Balance>" },
                { "name": "max_price", "type": "Compact<Price>" }
              ],
              "documentation": []
            },
            {
              "name": "redeem",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "synthetic_amount", "type": "Compact<Balance>" },
                { "name": "min_price", "type": "Compact<Price>" }
              ],
              "documentation": []
            },
            {
              "name": "liquidate",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "synthetic_amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "add_collateral",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "collateral_amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "withdraw_collateral",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "currency_id", "type": "CurrencyId" }
              ],
              "documentation": []
            }
          ],
          "events": [
            {
              "name": "Minted",
              "args": ["AccountId", "CurrencyId", "LiquidityPoolId", "Balance", "Balance"],
              "documentation": [
                " Synthetic token minted.",
                " (who, synthetic_currency_id, liquidity_pool_id, collateral_amount, synthetic_amount)"
              ]
            },
            {
              "name": "Redeemed",
              "args": ["AccountId", "CurrencyId", "LiquidityPoolId", "Balance", "Balance"],
              "documentation": [
                " Synthetic token redeemed.",
                " (who, synthetic_currency_id, liquidity_pool_id, collateral_amount, synthetic_amount)"
              ]
            },
            {
              "name": "Liquidated",
              "args": ["AccountId", "CurrencyId", "LiquidityPoolId", "Balance", "Balance"],
              "documentation": [
                " Synthetic token liquidated.",
                " (who, synthetic_currency_id, liquidity_pool_id, collateral_amount, synthetic_amount)"
              ]
            },
            {
              "name": "CollateralAdded",
              "args": ["AccountId", "CurrencyId", "LiquidityPoolId", "Balance"],
              "documentation": [
                " Collateral added.",
                " (who, synthetic_currency_id, liquidity_pool_id, collateral_amount)"
              ]
            },
            {
              "name": "CollateralWithdrew",
              "args": ["AccountId", "CurrencyId", "LiquidityPoolId", "Balance"],
              "documentation": [
                " Collateral withdrew.",
                " (who, synthetic_currency_id, liquidity_pool_id, collateral_amount)"
              ]
            }
          ],
          "constants": [
            { "name": "GetCollateralCurrencyId", "type": "CurrencyId", "value": "0x01", "documentation": [] }
          ],
          "errors": [
            { "name": "BalanceTooLow", "documentation": [] },
            { "name": "LiquidityProviderBalanceTooLow", "documentation": [] },
            { "name": "NotSupportedByLiquidityPool", "documentation": [] },
            { "name": "AskPriceTooHigh", "documentation": [] },
            { "name": "BidPriceTooLow", "documentation": [] },
            { "name": "NumOverflow", "documentation": [] },
            { "name": "NoPrice", "documentation": [] },
            { "name": "NegativeAdditionalCollateralAmount", "documentation": [] },
            { "name": "LiquidityPoolSyntheticPositionTooLow", "documentation": [] },
            { "name": "LiquidityPoolCollateralPositionTooLow", "documentation": [] },
            { "name": "NotEnoughLockedCollateralAvailable", "documentation": [] },
            { "name": "StillInSafePosition", "documentation": [] },
            { "name": "NotPoolOwner", "documentation": [] },
            { "name": "NoBidSpread", "documentation": [] },
            { "name": "NoAskSpread", "documentation": [] },
            { "name": "NotValidSyntheticCurrencyId", "documentation": [] }
          ]
        },
        {
          "name": "MarginProtocol",
          "storage": {
            "prefix": "MarginProtocol",
            "items": [
              {
                "name": "NextPositionId",
                "modifier": "Default",
                "type": { "Plain": "PositionId" },
                "fallback": "0x0000000000000000",
                "documentation": []
              },
              {
                "name": "Positions",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "PositionId", "value": "MarginPosition", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "PositionsByTrader",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "AccountId",
                    "key2": "(LiquidityPoolId,PositionId)",
                    "value": "bool",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "PositionsByPool",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "LiquidityPoolId",
                    "key2": "(TradingPair,PositionId)",
                    "value": "bool",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "Balances",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "AccountId",
                    "key2": "LiquidityPoolId",
                    "value": "Fixed128",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": []
              },
              {
                "name": "MarginCalledTraders",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "AccountId",
                    "key2": "LiquidityPoolId",
                    "value": "bool",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "MarginCalledPools",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "LiquidityPoolId", "value": "bool", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "TraderRiskThreshold",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "TradingPair", "value": "RiskThreshold", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "LiquidityPoolENPThreshold",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "TradingPair", "value": "RiskThreshold", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "LiquidityPoolELLThreshold",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "TradingPair", "value": "RiskThreshold", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              }
            ]
          },
          "calls": [
            {
              "name": "open_position",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "pair", "type": "TradingPair" },
                { "name": "leverage", "type": "Leverage" },
                { "name": "leveraged_amount", "type": "Compact<Balance>" },
                { "name": "price", "type": "Compact<Price>" }
              ],
              "documentation": []
            },
            {
              "name": "close_position",
              "args": [
                { "name": "position_id", "type": "Compact<PositionId>" },
                { "name": "price", "type": "Compact<Price>" }
              ],
              "documentation": []
            },
            {
              "name": "deposit",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "withdraw",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "trader_margin_call",
              "args": [
                { "name": "who", "type": "LookupSource" },
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" }
              ],
              "documentation": []
            },
            {
              "name": "trader_become_safe",
              "args": [
                { "name": "who", "type": "LookupSource" },
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" }
              ],
              "documentation": []
            },
            {
              "name": "trader_stop_out",
              "args": [
                { "name": "who", "type": "LookupSource" },
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" }
              ],
              "documentation": []
            },
            {
              "name": "liquidity_pool_margin_call",
              "args": [{ "name": "pool", "type": "Compact<LiquidityPoolId>" }],
              "documentation": []
            },
            {
              "name": "liquidity_pool_become_safe",
              "args": [{ "name": "pool", "type": "Compact<LiquidityPoolId>" }],
              "documentation": []
            },
            {
              "name": "liquidity_pool_force_close",
              "args": [{ "name": "pool", "type": "Compact<LiquidityPoolId>" }],
              "documentation": []
            },
            {
              "name": "set_trading_pair_risk_threshold",
              "args": [
                { "name": "pair", "type": "TradingPair" },
                { "name": "trader", "type": "Option<RiskThreshold>" },
                { "name": "enp", "type": "Option<RiskThreshold>" },
                { "name": "ell", "type": "Option<RiskThreshold>" }
              ],
              "documentation": []
            }
          ],
          "events": [
            {
              "name": "PositionOpened",
              "args": ["AccountId", "PositionId", "LiquidityPoolId", "TradingPair", "Leverage", "Amount", "Price"],
              "documentation": [
                " Position opened: (who, position_id, pool_id, trading_pair, leverage, leveraged_amount, market_price)"
              ]
            },
            {
              "name": "PositionClosed",
              "args": ["AccountId", "PositionId", "LiquidityPoolId", "Price"],
              "documentation": [" Position closed: (who, position_id, pool_id, market_price)"]
            },
            {
              "name": "Deposited",
              "args": ["AccountId", "LiquidityPoolId", "Amount"],
              "documentation": [" Deposited: (who, pool_id, amount)"]
            },
            {
              "name": "Withdrew",
              "args": ["AccountId", "LiquidityPoolId", "Amount"],
              "documentation": [" Withdrew: (who, pool_id, amount)"]
            },
            { "name": "TraderMarginCalled", "args": ["AccountId"], "documentation": [" TraderMarginCalled: (who)"] },
            { "name": "TraderBecameSafe", "args": ["AccountId"], "documentation": [" TraderBecameSafe: (who)"] },
            { "name": "TraderStoppedOut", "args": ["AccountId"], "documentation": [" TraderStoppedOut: (who)"] },
            {
              "name": "LiquidityPoolMarginCalled",
              "args": ["LiquidityPoolId"],
              "documentation": [" LiquidityPoolMarginCalled: (pool_id)"]
            },
            {
              "name": "LiquidityPoolBecameSafe",
              "args": ["LiquidityPoolId"],
              "documentation": [" LiquidityPoolBecameSafe: (pool_id)"]
            },
            {
              "name": "LiquidityPoolForceClosed",
              "args": ["LiquidityPoolId"],
              "documentation": [" LiquidityPoolForceClosed: (pool_id)"]
            },
            {
              "name": "TradingPairRiskThresholdSet",
              "args": ["TradingPair", "Option<RiskThreshold>", "Option<RiskThreshold>", "Option<RiskThreshold>"],
              "documentation": [
                " Set trading pair risk threshold (pair, trader_risk_threshold, liquidity_pool_enp_threshold, liquidity_pool_ell_threshold)"
              ]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "NoPrice", "documentation": [] },
            { "name": "NoAskSpread", "documentation": [] },
            { "name": "NoBidSpread", "documentation": [] },
            { "name": "MarketPriceTooHigh", "documentation": [] },
            { "name": "MarketPriceTooLow", "documentation": [] },
            { "name": "NumOutOfBound", "documentation": [] },
            { "name": "UnsafeTrader", "documentation": [] },
            { "name": "TraderWouldBeUnsafe", "documentation": [] },
            { "name": "UnsafePool", "documentation": [] },
            { "name": "PoolWouldBeUnsafe", "documentation": [] },
            { "name": "SafeTrader", "documentation": [] },
            { "name": "SafePool", "documentation": [] },
            { "name": "NotReachedRiskThreshold", "documentation": [] },
            { "name": "MarginCalledTrader", "documentation": [] },
            { "name": "MarginCalledPool", "documentation": [] },
            { "name": "NoAvailablePositionId", "documentation": [] },
            { "name": "PositionNotFound", "documentation": [] },
            { "name": "PositionNotOpenedByTrader", "documentation": [] },
            { "name": "PositionNotAllowed", "documentation": [] },
            { "name": "CannotOpenPosition", "documentation": [] },
            { "name": "CannotOpenMorePosition", "documentation": [] },
            { "name": "InsufficientFreeMargin", "documentation": [] },
            { "name": "NoRiskThreshold", "documentation": [] }
          ]
        },
        {
          "name": "BaseLiquidityPoolsForMargin",
          "storage": {
            "prefix": "Instance1BaseLiquidityPools",
            "items": [
              {
                "name": "NextPoolId",
                "modifier": "Default",
                "type": { "Plain": "LiquidityPoolId" },
                "fallback": "0x00000000",
                "documentation": []
              },
              {
                "name": "Owners",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Twox64Concat",
                    "key": "LiquidityPoolId",
                    "value": "(AccountId,LiquidityPoolId)",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "Balances",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "LiquidityPoolId", "value": "Balance", "linked": false }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": []
              }
            ]
          },
          "calls": [
            { "name": "create_pool", "args": [], "documentation": [] },
            {
              "name": "disable_pool",
              "args": [{ "name": "pool_id", "type": "Compact<LiquidityPoolId>" }],
              "documentation": []
            },
            {
              "name": "remove_pool",
              "args": [{ "name": "pool_id", "type": "Compact<LiquidityPoolId>" }],
              "documentation": []
            },
            {
              "name": "deposit_liquidity",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "withdraw_liquidity",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            }
          ],
          "events": [
            {
              "name": "LiquidityPoolCreated",
              "args": ["AccountId", "LiquidityPoolId"],
              "documentation": [" Liquidity pool created (who, pool_id)"]
            },
            {
              "name": "LiquidityPoolDisabled",
              "args": ["AccountId", "LiquidityPoolId"],
              "documentation": [" Liquidity pool disabled (who, pool_id)"]
            },
            {
              "name": "LiquidityPoolRemoved",
              "args": ["AccountId", "LiquidityPoolId"],
              "documentation": [" Liquidity pool removed (who, pool_id)"]
            },
            {
              "name": "DepositLiquidity",
              "args": ["AccountId", "LiquidityPoolId", "Balance"],
              "documentation": [" Deposit liquidity (who, pool_id, amount)"]
            },
            {
              "name": "WithdrawLiquidity",
              "args": ["AccountId", "LiquidityPoolId", "Balance"],
              "documentation": [" Withdraw liquidity (who, pool_id, amount)"]
            }
          ],
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": "Balance",
              "value": "0x0000e8890423c78a0000000000000000",
              "documentation": []
            }
          ],
          "errors": [
            { "name": "NoPermission", "documentation": [] },
            { "name": "CannotCreateMorePool", "documentation": [] },
            { "name": "CannotRemovePool", "documentation": [] },
            { "name": "CannotDepositAmount", "documentation": [] },
            { "name": "CannotWithdrawAmount", "documentation": [] },
            { "name": "CannotWithdrawExistentialDeposit", "documentation": [] },
            { "name": "PoolNotFound", "documentation": [] }
          ]
        },
        {
          "name": "MarginLiquidityPools",
          "storage": {
            "prefix": "MarginLiquidityPools",
            "items": [
              {
                "name": "LiquidityPoolOptions",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "LiquidityPoolId",
                    "key2": "TradingPair",
                    "value": "MarginLiquidityPoolOption",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "SwapRates",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "TradingPair", "value": "SwapRate", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "AccumulatedSwapRates",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "LiquidityPoolId",
                    "key2": "TradingPair",
                    "value": "SwapRate",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": []
              },
              {
                "name": "AdditionalSwapRate",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "LiquidityPoolId", "value": "Fixed128", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "MaxSpread",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "TradingPair", "value": "Balance", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "Accumulates",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Twox64Concat",
                    "key": "TradingPair",
                    "value": "(AccumulateConfig,TradingPair)",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "EnabledTradingPairs",
                "modifier": "Optional",
                "type": { "Map": { "hasher": "Twox64Concat", "key": "TradingPair", "value": "bool", "linked": false } },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "LiquidityPoolEnabledTradingPairs",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "LiquidityPoolId",
                    "key2": "TradingPair",
                    "value": "bool",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "DefaultMinLeveragedAmount",
                "modifier": "Default",
                "type": { "Plain": "Balance" },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": []
              },
              {
                "name": "MinLeveragedAmount",
                "modifier": "Optional",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "LiquidityPoolId", "value": "Balance", "linked": false }
                },
                "fallback": "0x00",
                "documentation": []
              }
            ]
          },
          "calls": [
            {
              "name": "set_spread",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "pair", "type": "TradingPair" },
                { "name": "bid", "type": "Compact<Balance>" },
                { "name": "ask", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "set_enabled_trades",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "pair", "type": "TradingPair" },
                { "name": "enabled", "type": "Leverages" }
              ],
              "documentation": []
            },
            {
              "name": "set_swap_rate",
              "args": [
                { "name": "pair", "type": "TradingPair" },
                { "name": "rate", "type": "SwapRate" }
              ],
              "documentation": []
            },
            {
              "name": "set_additional_swap",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "rate", "type": "Fixed128" }
              ],
              "documentation": []
            },
            {
              "name": "set_max_spread",
              "args": [
                { "name": "pair", "type": "TradingPair" },
                { "name": "max_spread", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "set_accumulate",
              "args": [
                { "name": "pair", "type": "TradingPair" },
                { "name": "frequency", "type": "BlockNumber" },
                { "name": "offset", "type": "BlockNumber" }
              ],
              "documentation": []
            },
            { "name": "enable_trading_pair", "args": [{ "name": "pair", "type": "TradingPair" }], "documentation": [] },
            {
              "name": "disable_trading_pair",
              "args": [{ "name": "pair", "type": "TradingPair" }],
              "documentation": []
            },
            {
              "name": "liquidity_pool_enable_trading_pair",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "pair", "type": "TradingPair" }
              ],
              "documentation": []
            },
            {
              "name": "liquidity_pool_disable_trading_pair",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "pair", "type": "TradingPair" }
              ],
              "documentation": []
            },
            {
              "name": "set_default_min_leveraged_amount",
              "args": [{ "name": "amount", "type": "Compact<Balance>" }],
              "documentation": []
            },
            {
              "name": "set_min_leveraged_amount",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            }
          ],
          "events": [
            {
              "name": "SetSpread",
              "args": ["AccountId", "LiquidityPoolId", "TradingPair", "Balance", "Balance"],
              "documentation": [" Set spread (who, pool_id, pair, bid, ask)"]
            },
            {
              "name": "SetEnabledTrades",
              "args": ["AccountId", "LiquidityPoolId", "TradingPair", "Leverages"],
              "documentation": [" Set enabled trades (who, pool_id, pair, enabled)"]
            },
            {
              "name": "SwapRateUpdated",
              "args": ["TradingPair", "SwapRate"],
              "documentation": [" Swap rate updated (pair, swap_rate)"]
            },
            {
              "name": "AccumulatedSwapRateUpdated",
              "args": ["LiquidityPoolId", "TradingPair", "SwapRate"],
              "documentation": [" Accumulated swap rate updated (pool_id, pair, accumulated_swap_rate)"]
            },
            {
              "name": "AdditionalSwapRateUpdated",
              "args": ["AccountId", "LiquidityPoolId", "Fixed128"],
              "documentation": [" Additional swap rate updated (who, pool_id, additional_swap_rate)"]
            },
            {
              "name": "MaxSpreadUpdated",
              "args": ["TradingPair", "Balance"],
              "documentation": [" Max spread updated (pair, spread)"]
            },
            {
              "name": "SetAccumulate",
              "args": ["TradingPair", "BlockNumber", "BlockNumber"],
              "documentation": [" Set accumulate (pair, frequency, offset)"]
            },
            {
              "name": "TradingPairEnabled",
              "args": ["TradingPair"],
              "documentation": [" Trading pair enabled (pair)"]
            },
            {
              "name": "TradingPairDisabled",
              "args": ["TradingPair"],
              "documentation": [" Trading pair disabled (pair)"]
            },
            {
              "name": "LiquidityPoolTradingPairEnabled",
              "args": ["TradingPair"],
              "documentation": [" LiquidityPool trading pair enabled (pair)"]
            },
            {
              "name": "LiquidityPoolTradingPairDisabled",
              "args": ["TradingPair"],
              "documentation": [" LiquidityPool trading pair disabled (pair)"]
            },
            {
              "name": "SetDefaultMinLeveragedAmount",
              "args": ["Balance"],
              "documentation": [" Set default min leveraged amount (default_min_leveraged_amount)"]
            },
            {
              "name": "SetMinLeveragedAmount",
              "args": ["LiquidityPoolId", "Balance"],
              "documentation": [" Set min leveraged amount (pool_id, min_leveraged_amount)"]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "NoPermission", "documentation": [] },
            { "name": "SwapRateTooHigh", "documentation": [] },
            { "name": "SwapRateTooLow", "documentation": [] },
            { "name": "SpreadTooHigh", "documentation": [] },
            { "name": "TradingPairNotEnabled", "documentation": [] },
            { "name": "NumOutOfBound", "documentation": [] }
          ]
        },
        {
          "name": "BaseLiquidityPoolsForSynthetic",
          "storage": {
            "prefix": "Instance2BaseLiquidityPools",
            "items": [
              {
                "name": "NextPoolId",
                "modifier": "Default",
                "type": { "Plain": "LiquidityPoolId" },
                "fallback": "0x00000000",
                "documentation": []
              },
              {
                "name": "Owners",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Twox64Concat",
                    "key": "LiquidityPoolId",
                    "value": "(AccountId,LiquidityPoolId)",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "Balances",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "LiquidityPoolId", "value": "Balance", "linked": false }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": []
              }
            ]
          },
          "calls": [
            { "name": "create_pool", "args": [], "documentation": [] },
            {
              "name": "disable_pool",
              "args": [{ "name": "pool_id", "type": "Compact<LiquidityPoolId>" }],
              "documentation": []
            },
            {
              "name": "remove_pool",
              "args": [{ "name": "pool_id", "type": "Compact<LiquidityPoolId>" }],
              "documentation": []
            },
            {
              "name": "deposit_liquidity",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "withdraw_liquidity",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "amount", "type": "Compact<Balance>" }
              ],
              "documentation": []
            }
          ],
          "events": [
            {
              "name": "LiquidityPoolCreated",
              "args": ["AccountId", "LiquidityPoolId"],
              "documentation": [" Liquidity pool created (who, pool_id)"]
            },
            {
              "name": "LiquidityPoolDisabled",
              "args": ["AccountId", "LiquidityPoolId"],
              "documentation": [" Liquidity pool disabled (who, pool_id)"]
            },
            {
              "name": "LiquidityPoolRemoved",
              "args": ["AccountId", "LiquidityPoolId"],
              "documentation": [" Liquidity pool removed (who, pool_id)"]
            },
            {
              "name": "DepositLiquidity",
              "args": ["AccountId", "LiquidityPoolId", "Balance"],
              "documentation": [" Deposit liquidity (who, pool_id, amount)"]
            },
            {
              "name": "WithdrawLiquidity",
              "args": ["AccountId", "LiquidityPoolId", "Balance"],
              "documentation": [" Withdraw liquidity (who, pool_id, amount)"]
            }
          ],
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": "Balance",
              "value": "0x0000e8890423c78a0000000000000000",
              "documentation": []
            }
          ],
          "errors": [
            { "name": "NoPermission", "documentation": [] },
            { "name": "CannotCreateMorePool", "documentation": [] },
            { "name": "CannotRemovePool", "documentation": [] },
            { "name": "CannotDepositAmount", "documentation": [] },
            { "name": "CannotWithdrawAmount", "documentation": [] },
            { "name": "CannotWithdrawExistentialDeposit", "documentation": [] },
            { "name": "PoolNotFound", "documentation": [] }
          ]
        },
        {
          "name": "SyntheticLiquidityPools",
          "storage": {
            "prefix": "SyntheticLiquidityPools",
            "items": [
              {
                "name": "LiquidityPoolOptions",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "LiquidityPoolId",
                    "key2": "CurrencyId",
                    "value": "SyntheticLiquidityPoolOption",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "MinAdditionalCollateralRatio",
                "modifier": "Default",
                "type": { "Plain": "Permill" },
                "fallback": "0x00000000",
                "documentation": []
              },
              {
                "name": "MaxSpread",
                "modifier": "Default",
                "type": {
                  "Map": { "hasher": "Twox64Concat", "key": "CurrencyId", "value": "Balance", "linked": false }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": []
              }
            ]
          },
          "calls": [
            {
              "name": "set_spread",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "bid", "type": "Compact<Balance>" },
                { "name": "ask", "type": "Compact<Balance>" }
              ],
              "documentation": []
            },
            {
              "name": "set_additional_collateral_ratio",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "ratio", "type": "Option<Permill>" }
              ],
              "documentation": []
            },
            {
              "name": "set_min_additional_collateral_ratio",
              "args": [{ "name": "ratio", "type": "Compact<Permill>" }],
              "documentation": []
            },
            {
              "name": "set_synthetic_enabled",
              "args": [
                { "name": "pool_id", "type": "Compact<LiquidityPoolId>" },
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "enabled", "type": "bool" }
              ],
              "documentation": []
            },
            {
              "name": "set_max_spread",
              "args": [
                { "name": "currency_id", "type": "CurrencyId" },
                { "name": "max_spread", "type": "Compact<Balance>" }
              ],
              "documentation": []
            }
          ],
          "events": [
            {
              "name": "SetSpread",
              "args": ["AccountId", "LiquidityPoolId", "CurrencyId", "Balance", "Balance"],
              "documentation": [" Set spread (who, pool_id, currency_id, bid, ask)"]
            },
            {
              "name": "SetAdditionalCollateralRatio",
              "args": ["AccountId", "LiquidityPoolId", "CurrencyId", "Option<Permill>"],
              "documentation": [" Set additional collateral ratio (who, pool_id, currency_id, ratio)"]
            },
            {
              "name": "SetMinAdditionalCollateralRatio",
              "args": ["Permill"],
              "documentation": [" Set min additional collateral ratio (min_additional_collateral_ratio)"]
            },
            {
              "name": "SetSyntheticEnabled",
              "args": ["AccountId", "LiquidityPoolId", "CurrencyId", "bool"],
              "documentation": [" Set synthetic enabled (who, pool_id, currency_id, enabled)"]
            },
            {
              "name": "MaxSpreadUpdated",
              "args": ["CurrencyId", "Balance"],
              "documentation": [" Max spread updated (currency_id, spread)"]
            }
          ],
          "constants": [],
          "errors": [
            { "name": "NoPermission", "documentation": [] },
            { "name": "SpreadTooHigh", "documentation": [] }
          ]
        }
      ],
      "extrinsic": {
        "version": 4,
        "signedExtensions": [
          "CheckSpecVersion",
          "CheckTxVersion",
          "CheckGenesis",
          "CheckEra",
          "CheckNonce",
          "CheckWeight",
          "ChargeTransactionPayment",
          "ValidateEquivocationReport"
        ]
      }
    }
  }
}
